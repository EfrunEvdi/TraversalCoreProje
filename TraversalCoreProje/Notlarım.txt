# 2 Ders (Mimariye Genel Bakış)
N Katmanlı Mimari (N Tİer Arc.)
--------------------------------
Entity Layer: 
* Bu katmanda Entityler tanımlanacak. 
* SQL de Table olarak tutulan datalar C# ta Class olarak, SQL de Column olarak tutalan datalar da C# ta prooerty olarak tutulacak.
--> Code First: Tamamen kod öncelikli ilerlemek.
--------------------------------
Data Access Layer:
* Bu katmanda veri tabanı crud işlemleri için CRUD işlemleri alt yapısı oluşturulacak. Repository Desing Pattern kullanacağız.
* CREAT-READ-UPDATE-DELETE
--------------------------------
Business Layer:
* Validasyonların kontrolü 
--> Lokasyon max 50 karakter olmalı
--> Fiyat mutlaka sayısal veri olmalı vb.
--------------------------------
Presentation Layer:
* Sunum katmanı Controller tarafındaki backend kodları ve projenin Uİ kısmı bu katmanda yer alır.

# 3 Ders (Katmanların Oluşturulması)
- Solition üstüne sağ tık add new project diyoruz ve 3 katmanı ekliyoruz.
* Concrete: Somut ifadelerin tutulduğu klasör.
* Abstarct: Soyut ifadelerin tutulduğu klasör.

- EntityLayer: 
Class -> Table
Property -> Column
*Lokasyon, Hakkımızda, Müşteriler, Admin gibi

EntityLayer içine new folder Concrete ekliyoruz.
Conctere içine new class Destination + About

# 4 Ders (Entity Katmanı)
EntityLayer içine Conctere içine new class Feature + Feature2 + SubAbout + Testimonial + Newsletter

# 5 Ders (Entitylerin Tamamlanması)
EntityLayer içine Conctere içine new class About2 + Guide + Contact

# 6 Ders (Entity Framework Core Paketleri)
Bütün katmanlara aşağıdaki paketleri yüklüyoruz.
Microsoft.EntityFrameworkCore (5.0.12)
Microsoft.EntityFrameworkCore.Desing (5.0.12)
Microsoft.EntityFrameworkCore.SqlServer (5.0.12)
Microsoft.EntityFrameworkCore.Tools (5.0.12)

# 7 Ders (Context Sınıfı)
DataAccessLayer içine new folder

* Abstract

* Concrete
  + Context

* EntityFramework

* Repository

EntityLayer - DataAccessLayer - BusinessLayer - PresentationLayer

Bu sıralama önemli 
Entity -> Hepsine 
DataAccess -> Busines + Presentation
Business -> Presentation
referans olarak verilir.( Bu işlem add Project Reference olarak yapılır.)

Context doldurulduktan sonra EntityLayerdaki classlara [Key] attribute u koyuldu.

# 8 Ders (Migration Oluşturma)
İlk migration umuzu yapıyoruz.

# 9 Ders (Generic Interfaceler İle Çalışmak)
DataAccessLayer içine Abstract içine new interface IGuideDal + IDestinationDal
DRY yapmıyoruz. Bu yüzden generic yapı kullanacağız.
IGenericDal interfacesini açıp diğer interfacelere kalıtım yoluyla miras veriyoruz.

# 10 Ders (Repository Design Pattern)
DataAccessLayer içine Abstract içine new interface IAboutDal + IAbout2Dal + IContactDal + IFeatureDal + IFeature2Dal + INewsletterDal + SubAboutDal + ITestimonialDal ve miras verme işlemini yapıyoruz.
Daha sonra DataAccessLayer içindeki Repository içine new class GenericRepository deyip imğlement interface diiyor ve içlerini dolduruyoruz.

# 11 Ders (DAL İşlemlerinin Tamamlanması)
DataAccessLayer içine içine EntityFramework içine new class EfAboutDal + EfAbout2Dal + EfContactDal + EfDestinationDal + EfFeatureDal + EfFeature2Dal + EfGuideDal + EfNewsletterDal + EfSubAboutDal + EfTestimonialDal

# 12 Ders (Business Katmanında Interface Ve Sınıflar)
BusinessLayer içine new folder Abstract + Concrete + ValidationRule
Abstract içine new interface IGenericService + IAboutService + IAbout2Service + IContactService + IDestinationService + IFeatureService + IFeature2Service + IGuideService + INewsletterService + ISubAboutService + ITestimonialService
Concrete içine new class  AboutManager ( implement interface ediyoruz.) İçini dolduruyoruz diğerlerini zamanı gelince oluşturacağız.

# 13 Ders (Fluent Validation)
BusinessLayer ve Presentation içine aşağıdaki paketleri yüklüyoruz.
FluentValidation (10.3.6)
FluentValidation.AspNetCore (10.3.6)

BusinessLayer içine ValidationRules içine new class AboutValidator

UI katmanına new controller DefaultController + shared içide _UILayout ekliyoruz. DefaultController dan Index açıyoruz.

# 14 Ders (Layout Düzenlemeleri ve Partial Async)
UILayout'ta template'daki indexi kopyalayıp layout kısmını aldık geri kalanı Default index in içine attık. Uzantıları düzelttik @RenderBody() kodunu indexin gelmesini istediğimiz yere koyduk.
Layout u tamamladıktan sonra Partiallamak için Views içine new folder LayoutPartial içine new view razor view partial seçilecek _HeaderPartial.
@await Html.PartialAsync("/Views/LayoutPartial/HeaderPartial.cshtml") kodu ile partial kısmı çalışacak.
Bu işlemi _NavbarPartial.cshtml ve _FooterPartial.cshtml içinde yapıyoruz.

# 15 Ders (Default Index ve View Components)
Partiallayama _ScriptPartial.cshtml için ed yapıyoruz.
Daha sonrasında Partialları türkçeleştirdik.
Default/Index'teki alanları ViewComponent yapmaya karar verdik.
UI katmanı içine new folder ViewComponents açıyoruz.
Bu klasör içine new folder Default içine new class _SliderPartial.cs açıyoruz.

---------------------------------------------------------
- Partial View’de bir veri bize döndürücekse bunu mutlaka Contollerden alması gerekmektedir.
- Her bir View’in Partiala Controller üzerinden veri göndermek hem Controller maliyetini attırııcaktır hem de Controllera amacını saptıracaktır.
- PartialView yapılanması ihtiyacı olan dataları Controller üzerinden elde edeceği için Controller’daki maliyeti artırmakta ve SOLID prensiplerine aykırı davranılmasına sebebiyet verebilmektedir.
- PartiView yapısal olarak controller üzerinden beslenmektedir.
- *ViewCompenent* ihtiyacı olan dataları controller üzerinden değil direkt kendi cs.dosyasında elde edebilmektedir.Böylece controllerdaki luzumsuz maliyeti ortadan kaldırmış olmaktayız.
---------------------------------------------------------

Daha sonra Shared içine new folder _SliderPartial bu klasörün içine de Default.cshtml ekliyoruz. Default a istediğimiz yeri yapıştırdıktan sonra @await Component.InvokeAsync("_SliderPartial") ile bu Componenti çağırıyoruz. Sonrasında sayfayı türkçeleştiriyoruz.

# 16 Ders (Tur Rotalarının Listelenmesi)
Bir önceki Component işlemini _PopularDestinationsPartial içinde yapıyoruz.
BusinessLayer içine DestinationManager classını açıyoruz. Sadece GetList kısmını doldurup _PopularDestinationsPartial da 
 DestinationManager destinationManager = new DestinationManager(new EfDestinationDal()); ile yeni bir nesne türetiyoruz.public kısmının içine de var values = destinationManager.TGetList(); ile listeleme işlemini gerçekleştiriyoruz (return View(values);).
 Sonrada PopularDestination un Default unu foreach'a soktuk.

# 17 Ders (Feature Statistics)
Bu derste diğer bir Component olan _StatisticsPartial ı yapıyoruz. Bu sayfayı türkçeleştirip ViewBag lerle istatistikleri getiriyoruz.
Feature Componenti açıyoruz ama bu componentte listeleme yapacağımız için BusinessLayer içindeki concrete içine new class ekliyoruz FeatureManager GetList kısmını doldurduktan sonra Component işlemlerini tamamlıyoruz.

# 18 Ders (SubAbout Testimonial)
Bu Feature kısmının verilerini getirmek için if kullandım.
Daha sonrasında SubAbout için aynı Component işlemlerini tekrarladık.
Testimonial kısmınıda bu şekilde oluşturuyoruz.

# 19 Ders (Testimonial Listesi)
Testimonial i türkçeleştirip foreach e soktuk. Daha sonrasında footer ıda türkçeleştirdik.

# 20 Ders (Tur Rotalarımız)
Template in tam halini indirdik.
DestinationController açtık. Index ekledik(Razor view + Loyout).
services.html sayfasından yararlanarak Destination/Index i doldurup, türkçeleştirip, foreach a sokuyoruz.

# 21 Ders (Layout Düzenlemeleri ve Single Page Sayfası)
DestinationDetails için DestinationControllerda  HttpGet ve HttpPost controller satırları oluşturduk. Template de ilgi sayfayı bu details sayfasına ekledik. Düzgün çalışmadığı için layout katmanında köklü bir değişiklik yaptık.

# 22 Ders (Mini Proje Tur Rotaları)
* Anasayfa slider fotorafları gelmiyor.
Bu derste DestinationDetails sayfası için 2 tablo olmaması adına Destination Entitysine eklemeler yaptık. Daha sonra GetByID kısmı yoktu bizde DataAccessLayerda onu yazdık ve DestinationManager da içini doldurduk. Controller tarafındada HttpGette bu id yi getirme kodunu kullandık. Devamında @Model.Details1 istediğimiz satırı çağırdık. DestinationDetailste sadeleştirmeler yaptık.

# 23 Ders (Yorum Listesi ve Yeni Yorum Alanları)
Bu derste DestinationDetails kısmındaki yorum kısmı için yeni bir tablo oluşturduk ve bu tabloyu Destination tablosuna bağladık.Migration yaptık.
_CommentListPartial için bir component yapıyoruz.
_AddCommentPartial İçin de component işlemini yapıyoruz.

# 24 Ders (Destinasyon Yorumları)
Yorumları listeleyebilmek için IGenericDal'a List<T> GetListByFilter(Expression<Func<T,bool>> filter); yazdık. Bu işlemi yaptıktan sonra GenericReposityor'de

 public List<T> GetListByFilter(Expression<Func<T, bool>> filter)
        {
            using var c = new Context();
            return c.Set<T>().Where(filter).ToList();
        }

ile implemen interface ediyoruz.
ICommentDal ve EfCommentDal'ı ekledik. Ardından ICommentService ve CommentManager ı ekliyoruz. Daha sonra CommentManager da

 public List<Comment> TGetDestinationByID(int id)
        {
            return _commentDal.GetListByFilter(x => x.DestinationID == id);
        }

ve ICommentService'e

        List<Comment> TGetDestinationByID(int id);

kodu ile id ye göre getirme işlemini yapıyoruz.

id ile işlem yapacağımız için @await Component.InvokeAsync("_CommentListPartial",new { id = ViewBag.DestinationID }) ile id yi alıyoruz.

# 25 Ders (Yorum Yapma İşleminin Hazırlanması)
Yorum yap alanını türkçeleştirdik.
Bu alanı componentte yapmaya çalıştık fakat olmadı bu yüzden CommentController açtık partialview olarak yapacağız.
Controllerda HttpGet ve Post işlemlerini tamamladıktan sonra açtığımız AddComment view inde sayfa düzgün bir şekilde geldi fakat yorum yaptırmadı bu işlemi Ajaxla yapmaya karar verdik. 26 derste...

# 26 Ders (Yorum Yapma İşlemi)
Bu ders çok önemli Ajax işleminden vazgeçtik. CommentController tarafında aynı methodu hem bir partial view hemde Iactionresult olarak tanımladık.

[HttpGet]
public PartialViewResult AddComment()
  {
       return PartialView();
  }
[HttpPost]
public IActionResult AddComment(Comment comment)
  {
       comment.CommentDate = Convert.ToDateTime(DateTime.Now.ToShortDateString());
       comment.CommentStatus = true;
       comment.DestinationID = 3;
       commentManager.TAdd(comment);
       return RedirectToAction("Index", "Destination");
  }
bu kalıp çok önemli.

Bu dersin devamında comment.DestinationID = 3; ile hangi sayfaya yorum yaparsak yapalım id=3 olanrotaya yorum yapar bunu dzeltmek adına şu işlemleri yapıyoruz.

Öncelikle DestinationDetails'de ;

@await Html.PartialAsync("~/Views/Comment/AddComment.cshtml",new { id = ViewBag.DestinationID }) olarak güncelledim.

CommentController'ın HttpPost kısmını ;

[HttpPost]
        public IActionResult AddComment(Comment comment)
        {
            comment.CommentDate = Convert.ToDateTime(DateTime.Now.ToShortDateString());
            comment.CommentStatus = true;

            commentManager.TAdd(comment);
            return RedirectToAction("DestinationDetails", "Destination", new { id = comment.DestinationID });
        } 
olarak yazdım son kod bizi ilgili detay sayfasına atayacak.

AddComment kısmında da ;

<div class="form-group col-lg-6">
            <input type="hidden" name="DestinationID" class="form-control" value="@ViewBag.DestinationID" required="" />
</div> 
olarak id yi kayıt ettirdim.

# 27 Ders (Identity Kütüphanesi)
Bu derste identity paketlerini yüklüyoruz.
BusinessLayer hariç tüm katmanlara yüklediğimiz paketler;
- Microsoft.AspNetCore.Identity (2.2.0)
- Microsoft.AspNetCore.Identity.EntityFrameworkCore (5.0.12)

Daha sonra EntityLayer a AppUser ve AppRole classı açıyoruz. Bu işlemleri yaptıktan sonra public class Context : IdentityDbContext<AppUser, AppRole, int> olarak Context'i güncelliyoruz. Daha sonra migration yapıyoruz.

# 28 Ders (Login ve Resigter Sayfaları)
Giriş ve kullanıcı templatelerini yükledikten sonra LoginController açıyoruz.
Daha sonra SingUp ve SingIn controllerlarını tanımladıktan sonra SingUp için bire view ekliyoruz. ( Partial değil Layoutsuz.) SingIn içinde aynı işlemi yapıyoruz.
İndirdiğimiz templatelari bu view dosyalarına koyup türkçeleştiriyoruz.

# 29 Ders (Identity ile Register İşlemi)
startup.cs te 28. satıra services.AddDbContext<Context>(); yazdık.
29. satıra services.AddIdentity<AppUser,AppRole>().AddEntityFrameworkStores<Context>(); yazdık.
34-38 arası services.AddMvc(config =>
            {
                var policy = new AuthorizationPolicyBuilder().RequireAuthenticatedUser().Build();
                config.Filters.Add(new AuthorizeFilter(policy));
            }); yazdık.
40. satıra services.AddMvc(); yazdık.
58. satıra  app.UseAuthentication(); yazdık.

Bu bölümde slider kısmı düzeltildi.

Sonrasında LoginController'a
private readonly UserManager<AppUser> _userManager;

        public LoginController(UserManager<AppUser> userManager)
        {
            _userManager = userManager;
        }
        yazdık.
HttpPost kısmını şu şekilde güncelledik.
[HttpPost]
        public async Task<IActionResult> SingUp(UserRegisterViewModel p)
        {
            return View();
        }
Daha sonrasında UserRegisterViewModel modelini oluşturduk.

Devamında modelden gelen değerlerle elimizdeki AppUser tablosunu eşleştirdik. Bunları yaptıktan sonra  kaydetme işlemi gerçekleşti.

# 30 Ders (Asp-Validation-For Mesajları)
SingUp templat i işimize yaramıyacağı için yeni bir template indirdik ve bunu tekrardan modelimize uydurduk, türkçeleştirdik.

# 31 Ders (Custom Identity Validator)
<div class="text-danger" asp-validation-summary="ModelOnly">
</div> 
kodu ile şifredeki kuralları görebiliyoruz. Ama ingilizce olarak geliyor. Bu yapıyı türkçeleştirmemiz lazım. Türkçeleştirmek için Bir model ekliyoruzz bu model önemli CustomIdentityValidator.
daha sonrasında bu modelin çalışabilmesi için startup'ın 32. satırını
services.AddIdentity<AppUser, AppRole>().AddEntityFrameworkStores<Context>().AddErrorDescriber<CustomIdentityValidator>().AddEntityFrameworkStores<Context>();

# 32 Ders (Areas ve Member Layout)
Dashbord template si indirdik. Kullanıcı için bir layout oluşturup adını _UserLayout koyduk. Areas adında yeni bir klasör oluşturduk. Sağ tık add area diyip mvc area seçip adını Member koyduk. Bu işlemle birlikte gelen Scaffolding sayfasındaki

app.UseEndpoints(endpoints =>
        {
          endpoints.MapControllerRoute(
            name : "areas",
            pattern : "{area:exists}/{controller=Home}/{action=Index}/{id?}"
          );
        });

kodunu startupda 82. satıra yapıştırdık.
Daha sonra açtığımız bu Areanın içindeki Controller klasörüne 3 tane controller ekledik.
-> CommentController
-> MessageController
-> ProfileController
   
*** Areadaki controller in çalışması için [Area("Member")] yazmalıyız. ***
[AllowAnonymous] de yazıyoruz ki giriş istemesin.
_UserLayoutu düzenledik ve partiallara ayırmaya başladık.
Bu Partialları oluşturmak için MemberLayouPartial adlı klasörün içine açıyoruz.
-> _HeaderPartial
-> _NavbarPartial

# 33 Ders (Member Sayfasında Verilerin Listelenmesi)
-> _Navbar2Partial
-> _RightbarPartial
-> _FooterPartial
-> _ScriptPartial partial larınıda oluşturduk.

Daha sonrasında DestinationController ekliyoruz Member daki controller'a. Açtığımız bu controller için index açtık layoutu _UserLayout.
Bu indexi aktif tur rotalarımız olarak kullandık. Dashboard tan gelen tabloyu kullandım ben.

# 34 Ders (Identity ile Login İşlemi)
        private readonly SignInManager<AppUser> _singInManager;
Login işlemi için LoginController'a 
private readonly SignInManager<AppUser> _singInManager; 
kodunu ekledik.
Altındaki Constructor metodunu da 

public LoginController(UserManager<AppUser> userManager, SignInManager<AppUser> singInManager)
        {
            _userManager = userManager;
            _singInManager = singInManager;
        }

şeklinde güncelliyoruz.
Sonrasında UserSingInViewModel i oluşturuyoruz.
Devamında LoginController'da SinIn kısmının post kısmını yazıyoruz.

Daha sonra SingIn de @model TraversalCoreProje.Models.UserSingInViewModel kodu ile form içini düzenliyoruz.
Sisteme otantike olmuş olduk.

# 35 Ders (User Bilgilerinin Profilde Listelenmesi)
Bu bölümde prfil düzenleme kısmını yapacağız öncelikle area içindeki ProfileController dan index açıyorum, devamında area içinde ki model klasörüne UserEditViewModel ini ekliyoruz. Açtığımız index sayfasında bir form kodu yazıyoruz bu kodları @model TraversalCoreProje.Areas.Member.Models.UserEditViewModel ile eşleştiriyoruz.
Bu işlemlerden sonra ProfileController ın son hali 

[Area("Member")]
[Route("Member/[controller]/[action]")]
    public class ProfileController : Controller
    {
        private readonly UserManager<AppUser> _userManager;

        public ProfileController(UserManager<AppUser> userManager)
        {
            _userManager = userManager;
        }
        [HttpGet]
        public async Task<IActionResult> Index()
        {
            var values = await _userManager.FindByNameAsync(User.Identity.Name);
            UserEditViewModel userEditViewModel = new UserEditViewModel();
            userEditViewModel.Name = values.Name;
            userEditViewModel.Surname = values.Surname;
            userEditViewModel.PhoneNumber = values.PhoneNumber;
            userEditViewModel.Mail = values.Email;
            return View(userEditViewModel);
        }

oluyor.

Çok Önemli
------------------------------------
[Route("Member/[controller]/[action]")] kodu ile login controllerdaki yönlendirme kodu olan return RedirectToAction("Index", "Profile", new { area = "Member" }); çalışır.

Bu yönlendirme sağlandıktan sonra Dashboard template'inden beğendiğim kısımla birlikte hocanın yaptığı form kısmını birleştirip güzel bir profil düzenleme kısmı yaptım.

# 36 Ders (Identity ile Profil & Resim Bilgisi Güncelleme)
Bu derste amacımız kullanıcan profil resmi almak. Bu işlem için sırayla şunları yapıyoruz ;

UserEditViewModel e 

public IFormFile Image { get; set; } 

kodunu ekiyoruz. Dosya alacağız çünkü kullanıcıdan.

Devamında Profile controller da 

[HttpPost]
        public async Task<IActionResult> Index(UserEditViewModel p)
        {
            var user = await _userManager.FindByNameAsync(User.Identity.Name);
            if (p.Image != null)
            {
                var resource = Directory.GetCurrentDirectory();
                var extension = Path.GetExtension(p.Image.FileName);
                var imagename = Guid.NewGuid() + extension;
                var savelocation = resource + "/wwwroot/userimages/" + imagename;
                var stream = new FileStream(savelocation, FileMode.Create);
                await p.Image.CopyToAsync(stream);
                user.ImageUrl = "/userimages/" + imagename;
            }
            user.Name = p.Name;
            user.Surname = p.Surname;
            user.PasswordHash = _userManager.PasswordHasher.HashPassword(user, p.Password);
            var result = await _userManager.UpdateAsync(user);
            if (result.Succeeded)
            {
                return RedirectToAction("SingIn", "Login");
            }
            return View();
        }

ekliyoruz.

Son olarak Profile/Indecte form kısmını <form method="post" enctype="multipart/form-data"> olarak güncelledik.

# 37 Ders (Rezervasyon Tablosu)
Bu derste rezervasyon kısmıyla ilgileneceğiz.
Bunun için EntityLayer da class oluşturuyoruz. Reservation classını context tede tanımlıyıp migration yapıyoruz. 
Devamında Memberde yeni bir controller açıyoruz. ReservationController. Bu controller ın içinde ;
MyCurrentReservation, MyOldReservation ve Getli Postlu NewRezervation controller larını oluşturuyoruz. Sonrasında NewRezervation için bir layoutlu View ekliyoruz.

# 38 Ders (Rezervasyon Sayfası)
Bu derste il olarak ReservationController'da
[HttpGet]
        public IActionResult NewRezervation()
        {
            List<SelectListItem> values = (from x in destinationManager.TGetList()
                                           select new SelectListItem
                                           {
                                               Text = x.City,
                                               Value = x.DestinationID.ToString()
                                           }).ToList();
            ViewBag.v = values;
            return View();
        }
[HttpGet] kısmını bu şekilde güncelledik. Daha sonra DataAccessLayer'da Abstract içine new interface IReservationDal, EntityFramework içine new class EfReservationDal'ı oluşturduk. BusinessLayer'da  Abstract içine new interface IReservationService, devamında Concrete içine new class ReservationManager ekliyoruz. İçinde sadece TAdd kısmını güncelledik.
Sonrasında ReservationController'a dönüp HttpPost kısmını ;
[HttpPost]
        public IActionResult NewRezervation(Reservation p)
        {
            p.AppUserID = 1;
            reservationManager.TAdd(p);
            return RedirectToAction("MyCurrentReservation");
        }
olarak güncelledik. Id yi daha sonra dinamik hale getircez.
NewReservation sayfasında form oluşturduk. Bu form ile yeni bir rezervasyon sqlde eklendi fakat gittiği sayfa olmadığı için hata verdi.

# 39 Ders (Rezervasyon İşlemleri Devamı)
Bu derste ilk olarak ReservationController'da p.Status = "Onay bekliyor..."; olarak güncelledik.
MyCurrentReservation için bir index ekledik. MyOldReservation içinde bir index ekledik. Sonrasında sidebar a bu sayfaların linkini verdik.

# 40 Ders (Giriş Yapan Kullanıcının Rezervasyonları)
ReservationController'a 
public IActionResult MyApprovalReservation()
        {
            return View();
        }
        ekliyoruz.
Bir Index ekliyoruz Onay bekleyen rezervasyonlar olarak başlık attık.
Sonrasında 

private readonly UserManager<AppUser> _userManager;

        public ReservationController(UserManager<AppUser> userManager)
        {
            _userManager = userManager;
        }
olarak controllera ekleme yaptık. 

MyApprovalReservation kısmını şu şekilde güncelledik.

public async Task<IActionResult> MyApprovalReservation()
       {
           var values = await _userManager.FindByNameAsync(User.Identity.Name);
           ViewBag.v = values.Id;
           return View();
       }

Devamında navbarda link verdik.
        
IReservationService'e List<Reservation> GetListApprovalReservation(int id); satırını ekledik.
ReservationManagerda implrmrnt ettikten sonra
public List<Reservation> GetListApprovalReservation(int id)
        {
            return _reservationDal.GetListByFilter(x => x.AppUserID == id);
        }
içini bu şekilde dolduruyoruz.
Bu işlemden sonra ReservationController da

public async Task<IActionResult> MyApprovalReservation()
        {
            var values = await _userManager.FindByNameAsync(User.Identity.Name);
            var valuesList = reservationManager.GetListApprovalReservation(values.Id);
            return View(valuesList);
        }

işlemini yapıyoruz.
Daha sonra bu controllerin indeksinde bir tablo oluşturduk.
Bu şekilde giriş yapmış kullanıcının tüm rezervasyon sitesi gelmiş oldu gelecek ders onu düzelticez.

# 41 Ders (Reservation Destination İlişkisi)
Öncelikle onay bekleyen rezarvosyanların gelmesi için ReservationManager'da

public List<Reservation> GetListApprovalReservation(int id)
        {
            return _reservationDal.GetListByFilter(x => x.AppUserID == id && x.Status == "Onay bekliyor...");
        }

bu değişikliği yaptık.
Bu değişiklikten sonra Onay bekliyor olan tüm rezervasyonlar geldi bunda sıkıntı yok devamında bu gelen tabloda destination kısmında Id yerine isim gelmesini istediğimiz için ilişki kurmaya IReservationDal'da 
public interface IResevationDal : IGenericDal<Reservation>
    {
        List<Reservation> GetListWithReservationByWaitApproval(int id);
        List<Reservation> GetListWithReservationByAccepted(int id);
        List<Reservation> GetListWithReservationByPrevious(int id);
    }

değişikliğini yaptık bunda da sıkıntı yok.
Bu yaptığımız değişiklikten sonra EfReservatiınDal da bu değişikliklerim implemen edip içlerini dolduracakken reservation ve destination arasında bir ilişki kurmadığımızı farkettik bu sebeple;
1)EntityLayerdaki Reservation sınıfında public string Destination { get; set; } satırını yorum satır yapıp hata çıkarak yerleri yorum satıra aldık. ( Bu kısım kullanıldığı ve yok ettiğimiz için hata fırlattı.) Devamında migration yaptık.
2)İlişkiyi kurmak için destination'a 

public List<Reservation> Reservations { get; set; } 

ve reservation'a 

public int DestinationID { get; set; }
public Destination Destination { get; set; }

satırlarını ekleyip migration yaptık. FAKAT RESERVATİON SAYFASINA ZATEN APPUSER TABLOSU BAĞLI OLDUĞU İÇİN 2. TABLOYU BAĞLAYAMAZSIN DİYE HATA VERDİ.

# 42 Ders (Entitye Özel List Metodu Tanımlama ve Include)
Aldığımız hatayı düzeltmek için tabloyu sıfırlıyoruz.
truncate table Reservations kodunu sql'e yazıp update database dedik ve oldu. :)))

Sqlde tabloyu sıfırladığımız için 3 tane data girdik. (Reservation)
Daha sonra EfReservationDal'da 

public List<Reservation> GetListWithReservationByWaitApproval(int id)
        {
            using (var context = new Context())
            {
                return context.Reservations.Include(x => x.Destination).Where(x => x.Status == "Onay bekliyor..." && x.AppUserID == id).ToList();
            }
        }

IReservationService'de

 public interface IReservationService : IGenericService<Reservation>
    {
        List<Reservation> GetListWithReservationByWaitApproval(int id);
    }

ReservationManager'da

 public List<Reservation> GetListWithReservationByWaitApproval(int id)
        {
            return _reservationDal.GetListWithReservationByWaitApproval(id);
        }

güncellemelerini yapıyoruz.

Daha sonrasında ReservationController'da

 public async Task<IActionResult> MyApprovalReservation()
        {
            var values = await _userManager.FindByNameAsync(User.Identity.Name);
            var valuesList = reservationManager.GetListWithReservationByWaitApproval(values.Id);
            return View(valuesList);
        }

değişikliğini yapıp Viewinde <td>@item.Destination.City</td> yazdığımızda artık Destinationda ki city ismi geliyor..
Şimdi diğerleri içinde aynı şeyi yapacağız. Diğer kısımları da tamamladıktan sonra hepsi istediğimiz gibi geliyor. İf else kullanarak eğer herhangi bir veri yoksa bu durumu h4 etiketiyle yazdırdım.

# 43 Ders (Member Profile Dashboard)
Bu derste profil kısmını güncellemeye karar verdik. Bunun için DahsboardController açıyoruz. Dashboard template'inde profile.html sayfasını  kullandık ordan işimize yarayan kısmı aldık ve Controllerdan açtığımız indexe yapıştırıyoruz. Daha conra controllerda oluşturduğumuz Viewbagler ile istediğimiz bilgiyi çektik. Devamını 44. derste yapacağız.

# 44 Ders (Dashboardda Verilerin Listelenmesi)
Oluşturduğumuz Index'i Componente ayırmaya karar verdik ama bu Componenti Memberin dışında oluşturduk.
    
ViewComponent içine new folder MemberDashboar içine new class _ProfileInformation ve Component içine new folder _ProfileInformation içine new view Default açtık. Bu default sayfasına istediğimiz yeri kestik ve yerne @await kodunu yazdık devamında Viewbagler ile istediğimiz bilgiyi çektik.

# 45 Ders (Tur Rehberleri Listesi)
Bu derste profilin içinde yeni bir component açacağız. _GuideList classını açıyoruz MemberDashboard içine.
GuideManager olmadığı için öncelikle BusinessLayer içindeki Concrete klasörü içine bu classı oluşturuyoruz. Sadece GetList kısmını doldurduk. Daha sonra Component içine _GuideList klasörü devamında Default view ini oluşturduk.
Bunları yaptıktan sonra Guide tablosuna 5 rehber ekledik. Bu 5 rehberin listelenmesi için GuideList te Getlist komutunu kullandık.
Devamında İstediğimiz yeri kesip foreach'e sokmak için sadeleştirdik döngüye soktuk. Bilgiler geldikten sonra dersi bitirdik.

# 46 Ders (Platform Ayarları View Component)
Bu derste componentleme işlemine _PlatformSetting kısmı ile başladık. Gerekli işlemleri yaptıktan sınra türkçeleştirip navbar kısmındaki linkleri de düzelttik.

# 47 Ders (Admin Areas)
Admin layoutu indirdik. Yani admin kısmına geçiş yaptık. Dashboard kısmına geri döneceğiz.
Öncelikle Views klasörü içinde yeni bir view açıyoruz _AdminLayout. devamında areaya yeni bir area ekliyoruz adı Admin. Sonra içine bir controller ekledik. DestinationController ([Area("Admin")] yazdık.) ve ardından Index e Razor view ekledik. Layout'u AdminLayout seçtik. Layoutta hata almamak için Renderbody kodunu yazdık. Areayı ekledikten sonra gelen Scaffolding içindeki koduda startup'ta en sona yapıştırdık.
Yaptığımız işlemlerden sonra Index sayfası geldi.
Layout'u düzenledik.

# 48 Ders (Admin Destination)
Bu derste öncelikle açtığımız DestinationController'da Getlist metodu ile listelemek için kodumuzu yazdık. Daha sonra indexinde tablo yapısı oluşturduk. Daha sonra CRUD işlemleri için controllerı doldurduk ADD ve UPDATE için yeni viewler oluşturup add için bir form yapısı oluşturduk eklerken hata verdi çünkü TAdd metodunun içi dolu değildi. Doldurunca düzeldi.

# 49 Ders (Admin Destination İşlemlerinin Tamamlanması)
Bu derste Indexte oluşturduğumuz forma linkler verdik. Deavmında UpdateDestination sayfasını oluşturduk. DestinationManagerdaki içleri boş olan ama bize gerekli olan kısmını doldurduk. RedirecToAction kısmını düzelttik. Herşey olması gerektiği gibi oldu.

Daha sonra AdminLayout'u partiallara ayırmaya karar verdik. Bunin için AdminController oluşturup;
-> PartialHeader
-> PartialAppBrandDemo controllerların oluşturup partial view ekledik. İlgili alanı kesip @await kodu ile Partial'ı çağırdık. Navbar kısmını 50. Derse bıraktık.

# 50 Ders (Admin Layout Partial View)
Bu derste partial'lamaya devam ediyoruz.
-> PartialSideBar
-> PartialNavbar
-> PartialFooter
-> PartialScript

Bu partialları oluşturduktan sonra side bar partial'ı bize uygun hale getirdik.

CRUD işlemlerinin formlarını ve listeleme kısmındaki tabloyu templateden çekerek düzenledim.

# 51 Ders (Admin Layout İkons)
Bu derste admin side bara yeni ikon ve menü ekledik.

# 52 Ders (Admin Dashboard 1)
Admin areada yeni bir controller oluşturuyoruz DashbordController ve View ekliyoruz. Daha sonra admin templatedaki index sayfasını alıp kendi indeximize yapıştırıp düzenledik.
Daha sonra bu dashboard sayfasını componentlere ayırmaya karar verdik. Bunun için ViewComponents içine new folder AdminDashboard ekledik daha sonra içine new class ekledik _DashboardBanner. Devamında shared içindeki Componetns içine new folder _DashboardBanner ve içine Razor Partial View ekledik (Default).
Daha sonra aynı işlemi
-> _Card1Statistic içinde yaptık.
Devamında bu componenti viewbagler ile dinamik hale getirdik.

# 53 Ders (Admin Dashboard 2)
-> _TotalRevenue
-> _Card2Statistic
-> _DestinationStatistic
-> _Destination2Statistic
-> _AdminGuideList.cs

Hoca _AdminHeaderPartialda yaptı ama ben içindeki eksik linkleri direk layout partial a koyduğum için yapmadım.

# 54 Ders (Include Metodu ve Ef Bağımlı. Kaldırılması)
Bu derste Admin içine new controller açıyoruz ismi CommentController. TGetList in içini dolduruyoruz ve Index ekliyoruz. Açtığımız indekte yorumları görebilmek için bir tablo oluşturduk.

Elimizdeki tarih verisinin formatını değiştirebilmek için @(((DateTime)item.CommentDate).ToString("dd-MMM-yyyy")) kodunu yazdık.
Bu yorumların bağlı olduğu rota ismini yazdırabilmek için 

 ICommentDal'da ;
 public List<Comment> GetListCommentWithDestination();

 EfCommentDal'da ;
  public List<Comment> GetListCommentWithDestination()
        {
            using (var c = new Context())
            {
                return c.Comments.Include(x => x.Destination).ToList();
            }
        }
değişikliklerini yaptık.

ICommentService'de
List<Comment> TGetListWithDestination();

CommentManager'da
public List<Comment> TGetListWithDestination()
        {
            return _commentDal.GetListCommentWithDestination();
        }

değişikliklerini yapım Admindeki CommentController'da TGetList'i GetListCommentWithDestination olarak güncelledik.

Ardıncan CommentController'da
private readonly ICommentService _commentService;

        public CommentController(ICommentService commentService)
        {
            _commentService = commentService;
        }
bu güncellemeyi yaptık ki her defasında new lemeye gerek kalmasın. Bunu yaptıktan sonra bir hata aldık ve bu hatayı düzeltmek için ;
startup'ta 
35 ve 36. satıra
 services.AddScoped<ICommentService, CommentManager>();
 services.AddScoped<ICommentDal, EfCommentDal>();
 kodlarını yazarak bu hatayı çözmüş olduk.

 Devamında yorum silme için controllerda DeleteComment'ı yazdık ve silme işlemini de yaptırdıktan sonra dersi bitirdik. (Manager'da boş alanları doldurduk.)

# 55 Ders (App User İşlemleri)
DestinationController'da

DestinationManager destinationManager = new DestinationManager(new EfDestinationDal()); 
yerine 
 private readonly IDestinationService _destinationService;

        public DestinationController(IDestinationService destinationService)
        {
            _destinationService = destinationService;
        }
yazıyoruz. (_destinationService olarak düzeltiyoruz hatalı yerleri.)
startuptada 
services.AddScoped<IDestinationService, DestinationManager>();
services.AddScoped<IDestinationDal, EfDestinationDal>(); 
değişikliğini yapıyoruz.

Daha sonra  Sidebardaki Misafirler kısmı için yeni bir controller açıyoruz. UserController bu controllerda kullanıcağımız tablo AppUser olduğu için önce DataAccessLayer içindeki Abstract klasörüne IAppUserDall interface'sini, EntityFramework'in EfAppUserDall classını sonrada BusinessLayer içindeki Abstract klasörü içine IAppUserService interfacesini, Concrete içine de AppUserManager classını ekleyip sadece TGetList kısmını dolduruyoruz.

Daha sonra newlememek için start upda kodları yazıyoruz.

Bu işlemlerden sonra açmış olduğumuz UserController'dan index oluşturduyoruz ve içine tablo yapısını kuruyoruz. Tabloyu oluşturduktan sonra controller ı doldurduk ve dersi bitirdik.

# 56 Ders (Container Dependencies ve Startup Refactoring)
Bu derste newleme işlemi için startupta yazdığımız

services.AddScoped<IDestinationService, DestinationManager>();
services.AddScoped<IDestinationDal, EfDestinationDal>(); 

gibi kodları düzenlemek adına BusinessLayer'a Container isimlimli new folder açıyoruz.
Devamında içine Extensions isimli bir class ekliyoruz. Bu classın içine startupta yazdığımız kodları kesip

 public static class Extensions
    {
        public static void ContainerDependencies(this IServiceCollection services)
        {
            services.AddScoped<ICommentService, CommentManager>();
            services.AddScoped<ICommentDal, EfCommentDal>();
            services.AddScoped<IDestinationService, DestinationManager>();
            services.AddScoped<IDestinationDal, EfDestinationDal>();
            services.AddScoped<IAppUserService, AppUserManager>();
            services.AddScoped<IAppUserDal, EfAppUserDal>();
        }
    }

olarak yapıştırıyoruz.
Bu class'ı startup'ta çağırmak için de kodları kestiğimiz yere

services.ContainerDependencies();

kodunu yazıyoruz.

Devamında UserController'da 

private readonly IReservationService _reservationService;

        public UserController(IAppUserService appUserService, IReservationService reservationService)
        {
            _appUserService = appUserService;
            _reservationService = reservationService;
        }
ile IReservationdan bir nesne türetiyoruz ve

public IActionResult ReservationUser(int id)
        {
            var values = _reservationService.GetListWithReservationByAccepted(id);
            return View(values);
        }

yazıp yeni bir view oluşturuyoruz bu view'i tablo ile dolduruğ grekli bilgileri çekiyoruz. Bu bilgileri çekerken kullanıcı adı ve soyadını kullanamadık onu yapacağız.

Member areasında tablo ve form güncellemesi yaptım.

# 57 Ders (Hata Sayfaları ve Rehber Listesi)
404 sayfasını kodlamak için önce startup'ta 65. satıra  app.UseStatusCodePagesWithReExecute("/ErrorPage/Error404", "?code{0}"); kodunu yazdık.
Daha sonra ErrorPage için bir controller ekliyoruz. Devamında add view diyip indirdiğimiz template'i içine kopyalayıp linkleri verdik.

Devamında admin içindeki controller'a GuideController açıyoruz. Bu controller'a view ekleyip tablo ile listelettiriyoruz. Bu tabloda oluşturulan rehberi aktif ve pasif yapma içine ve CRUD işlemleri içinde controller yazıp AddGuide için bir view açıp içine form yapısını kurdum. Devamında Edit ve Delete kısmınıda tamamladım.True-False'ı yapamadım.

# 58 Ders (Serilog ve Rehber İşlemleri)
Bu derste ilk olarak serilog işlemi ile ilgilendik.
İlk olarak startup'ta configure services içine 
services.AddLogging(x =>
            {
                x.ClearProviders();
                x.SetMinimumLevel(LogLevel.Debug);
                x.AddDebug();
            });
kodlarını yazdık. Daha sonra home controllerda

 _logger.LogInformation("Index sayfası çağrıldı.");
 _logger.LogError("Error log çağrıldı.");

kodlarını yazdık ki bu kodları yazdığımız sayfa çalıştığında outputta görebilelim.

Devamında paket indirdik (UI Katmanına) 

-> Serilog.Extensions.Logging.File (3.0.0)
devamında startupta

public void Configure(IApplicationBuilder app, IWebHostEnvironment env, ILoggerFactory loggerFactory)
        {
            var path = Directory.GetCurrentDirectory();
            loggerFactory.AddFile($"{path}\\Logs\\Log1.txt");

değişikliği yaptık. Bu değişiklik sayesinde UI katmanında Logs klasörü açıldı ve outputtaki bilgiler ordaki txt dosyasına kayıt olmaya başladı.

Bu dersin devamında hocam style yazdı Admin/ Index'te resimlerin yuvarlak olması için ama bizim ki zaten yuvarlak o yüzden yazmadım.
Sonrasında AddGuide dosyasını yaptı. AddGuideyi yaparken ders yarıda kaldı.

# 59 Ders (Excel Raporları)
Bu derste amacımız excel dosyası yapmak öncelikle ExcelController adında bir controller açıyoruz. Devamında UI katmanına paket indiriyoruz.
-> EPPlus (6.0.7)
Sonrasında conroller'ı

public IActionResult Index()
        {
            ExcelPackage excel = new ExcelPackage();
            var workSheet = excel.Workbook.Worksheets.Add("Sayfa1");

            workSheet.Cells[1, 1].Value = "Rota";
            workSheet.Cells[1, 2].Value = "Rehber";
            workSheet.Cells[1, 3].Value = "Kontenjan";

            workSheet.Cells[2, 1].Value = "Gürcistan - Batun Turu";
            workSheet.Cells[2, 2].Value = "Efrun Evdi";
            workSheet.Cells[2, 3].Value = "50";

            workSheet.Cells[3, 1].Value = "Sırbistan - Makedonya Turu";
            workSheet.Cells[3, 2].Value = "Selin Çetkin";
            workSheet.Cells[3, 3].Value = "35";

            var bytes = excel.GetAsByteArray();

            return File(bytes, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "dosya1.xlsx");
        }

şeklinde dolduruyoruz. Add View diyip bu safyayı çalıştırdığımızda excel dosyasının indiğini görüyoruz.

Şimdi bu durumu dinamik hale getirmke için DestinationModel açıyoruz devamında excel controller'ı
public class ExcelController : Controller
    {
        public IActionResult Index()
        {
            return View();
        }

        public List<DestinationModel> DestinationList()
        {
            List<DestinationModel> destinationModels = new List<DestinationModel>();
            using (var c = new Context())
            {
                destinationModels = c.Destinations.Select(x => new DestinationModel
                {
                    City = x.City,
                    DayNight = x.DayNight,
                    Price = x.Price,
                    Capacity = x.Capacity,
                }).ToList();
            }
            return destinationModels;
        }

        public IActionResult StaticExcelReport()
        {
            ExcelPackage excel = new ExcelPackage();
            var workSheet = excel.Workbook.Worksheets.Add("Sayfa1");

            workSheet.Cells[1, 1].Value = "Rota";
            workSheet.Cells[1, 2].Value = "Rehber";
            workSheet.Cells[1, 3].Value = "Kontenjan";

            workSheet.Cells[2, 1].Value = "Gürcistan - Batun Turu";
            workSheet.Cells[2, 2].Value = "Efrun Evdi";
            workSheet.Cells[2, 3].Value = "50";

            workSheet.Cells[3, 1].Value = "Sırbistan - Makedonya Turu";
            workSheet.Cells[3, 2].Value = "Selin Çetkin";
            workSheet.Cells[3, 3].Value = "35";

            var bytes = excel.GetAsByteArray();

            return File(bytes, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "dosya1.xlsx");
        }

        public IActionResult DestinationExcelReport()
        {
            using (var workbook = new XLWorkbook())
            {
                var workSheet = workbook.Worksheets.Add("Tur Listesi");
                workSheet.Cell(1, 1).Value = "Şehir";
                workSheet.Cell(1, 2).Value = "Konaklama Süresi";
                workSheet.Cell(1, 3).Value = "Fiyat";
                workSheet.Cell(1, 4).Value = "Kapasite";

                int rowCount = 2;
                foreach (var item in DestinationList())
                {
                    workSheet.Cell(rowCount, 1).Value = item.City;
                    workSheet.Cell(rowCount, 2).Value = item.DayNight;
                    workSheet.Cell(rowCount, 3).Value = item.Price;
                    workSheet.Cell(rowCount, 4).Value = item.Capacity;
                    rowCount++;
                }

                using (var stream = new MemoryStream())
                {
                    workbook.SaveAs(stream);
                    var content = stream.ToArray();
                    return File(content, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "YeniListe.xlsx");
                }
            };
        }
    }

Ayrıca burda -> ClosedXML (0.100.3) paketini indiriyoruz.
bu hale getirip açılan index sayfasına 2 buton koyup hem statik hemde dinamik haldeki excel dosyalarının indiğini görüyoruz.

Bu dersin 2. kısmında AddGuide'ye devam ediyoruz. Bu index sayfası için ValidationRule içine new class GuideValidator açıp istediğimiz gibi doldurum bu kuralları controller tarafında çağırım indextede span etiketi ile yazdırdık.

# 60 Ders (Pdf Raporları)
Bu derste öncelikle PdfReportController açıyoruz. Devamında UI katmanına paket indiriyoruz.
-> iTextSharp.LGPLv2.Core (1.9.2).
Sonrasında  açtığımız controller'da

 public IActionResult StaticPdfReport()
        {
            string path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/pdfreports/" + "dosya1.pdf");
            var stream = new FileStream(path, FileMode.Create);

            Document document = new Document(PageSize.A4);
            PdfWriter.GetInstance(document, stream);

            document.Open();
            Paragraph paragraph = new Paragraph("Traversal Rezervasyon Pdf Raporu");
            document.Add(paragraph);
            document.Close();
            return File("/pdfreports/dosya1.pdf", "application/pdf", "dosya1.pdf");
        }

işlemini yapıp index ekleyip button eklediğimizde pdf indirildiğini görüyoruz.

Devamında
 public IActionResult StaticCustomerReport()
        {
            string path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/pdfreports/" + "dosya2.pdf");
            var stream = new FileStream(path, FileMode.Create);

            Document document = new Document(PageSize.A4);
            PdfWriter.GetInstance(document, stream);

            document.Open();
            PdfPTable pdfPTable = new PdfPTable(3);

            pdfPTable.AddCell("Misafir İsmi");
            pdfPTable.AddCell("Misafir Soyismi");
            pdfPTable.AddCell("Misafir Tc");

            pdfPTable.AddCell("Efrun");
            pdfPTable.AddCell("Evdi");
            pdfPTable.AddCell("1234567890");

            pdfPTable.AddCell("Ali");
            pdfPTable.AddCell("Evdi");
            pdfPTable.AddCell("1234567891");

            pdfPTable.AddCell("Totem");
            pdfPTable.AddCell("Evdi");
            pdfPTable.AddCell("1234567892");

            document.Add(pdfPTable);
            document.Close();

            return File("/pdfreports/dosya2.pdf", "application/pdf", "dosya2.pdf");
        }

yazarak 2.dosyayı oluşturuyoruz. Bunları daha dinamik hale getirmem lazım.

# 61 Ders (Raporların Business'a Taşınması)
Bu derste excel ve pdf dosyalarını business'a taşıyacağız.
BusinessLayer Abstract içine new interface açıyoruz IExcel Service. Daha sonra Concrete içine new class ExcelManager. Daha sonra sında Business katmanına EPPlus (6.0.7) paketini indirip, ExcelManagerı doduruyoruz.
Devamında ExcelController'da 

private readonly IExcelService _excelService;

        public ExcelController(IExcelService excelService)
        {
            _excelService = excelService;
        }

değişikliklerini yapıp Business'ta Containerda 

services.AddScoped<IExcelService, ExcelManager>();

yaptıktan sonra

public IActionResult StaticExcelReport()
        {
            return File(_excelService.ExcelList(DestinationList()), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "YeniExcel.xlsx");
        }

Viewi çalıştırıp indirdiğimizde excel'in indiğini görüyoruz. Pdf ve excel kısımlarını admin areasına taşıdım.
Devamında SideBar'da link verme işlemi yaptık. Devamında business katmanında Abstract içine IPdfService Concrete için PdrManager açtıp Containerda 
            services.AddScoped<IPdfService, PdfManager>();
ile çağırdık.

Devamında Guide kısmına geçtik eksiklerimizi tamamlamak için edit add ve delete kısmını zaten yapmıştım. Öncelikle DataAccessLayer içindeki Abstract içindeki IGuideDal'da 

void ChangeToTrueByGuide(int id);
void ChangeToFalseByGuide(int id);

tanımlamalarını yapıp EntityFramework'taki EfGuideDal'da implement interface edip

            Context context = new Context();

public void ChangeToFalseByGuide(int id)
        {
            var values = context.Guides.Find(id);
            values.Status = false;
            context.SaveChanges();
        }

        public void ChangeToTrueByGuide(int id)
        {
            var values = context.Guides.Find(id);
            values.Status = true;
            context.SaveChanges();
        }

şeklinde dolduruyoruz.

Devamında BusinessLayer'daki Abstract içindeki IGuideService i

void TChangeToTrueByGuide(int id);
void TChangeToFalseByGuide(int id);

olarak. Concrete içindeki GuideManager'ı

public void TChangeToFalseByGuide(int id)
        {
            _guideDal.ChangeToFalseByGuide(id);
        }

        public void TChangeToTrueByGuide(int id)
        {
            _guideDal.ChangeToTrueByGuide(id);
        }

şeklinde dolduruyoruz. Admin areası içindeki GuideController'a da

public IActionResult ChangeToTrue(int id)
        {
            _guideService.TChangeToTrueByGuide(id);
            return RedirectToAction("Guide", "Admin");
        }

        public IActionResult ChangeToFalse(int id)
        {
            _guideService.TChangeToFalseByGuide(id);
            return RedirectToAction("Guide", "Admin");
        }

yazdıktan sonra kontrolü sağladığımızda butonların çalıştığını görüyoruz. Hoca bu derste return RedirectToAction("Guide", "Admin"); kısmında takıldı route falan yazdı ama ben yazmadım çalıştığı için.

# 62 Ders (Mail Gönderme İşlemi)
Bu derste mail işlemleriyle ilgili işlemler yapacağız.
İlk olarak Admin Areaya MailController açıyoruz. DEvamında http get ve post olarak IActionResult larını yazdık devamında MailRequest adında bir Model oluşturduk. Modelin ardından UI Katmanına 
-> MailKit (3.4.1) paketini indirdik. 
Bu paketi indirdikten sonra MailController'ın Post kısmını doldurup index açtık. İndexte bir form yapısı oluşturduk. traversalcoree@gmail.com Traversal123. adlı mailden 2 faktörlü korumayı açıp uygulama şifreleri kısmını yaparken hata verdi. Farklı bir mail açıp bu işlemleri tekrarladığımızda gönderme işlemi başarı ile tamamlandı. Body kısmını ilk kısımda yapamamıştık daha sonra o kısmı yapıp forma satır ekledik. Mail'in başarılı bir şekilde gönderdi.

# 63 Ders (Ajax İşlemleri 1)
Bu derste ajax işmelerine giricez. Öncelikle admin areada CityController açıyoruz. Ardından CityClass modelini ekleyip istediğimiz propertyleri ekliyoruz.
Ardından CityController'da 

public IActionResult CityList()
        {
            var jsonCity = JsonConvert.SerializeObject(cities);
            return Json(jsonCity);
        }


        public static List<CityClass> cities = new List<CityClass>
        {
            new CityClass
            {
                CityID= 1,
                CityName="Üsküp",
                CityCountry="Makedonya"
            },
            new CityClass{
                CityID= 2,
                CityName="Roma",
                CityCountry="İtalya"
            },
            new CityClass
            {
                CityID= 3,
                CityName="Londra",
                CityCountry="İngiltere"
            }
        };

düzenlemesini yapıp index açıyoruz. Açtığımız indexte bir script yazıyoruz fakat ben bunu template in içinde admin.js içine yazıp script partialında çağırdım. Hocanın yapmış olduğu indexi kendime göre düzenledim. Devamında bu index sayfasınanbir kaç buton daha ekledik.

# 64 Ders (Ajax İşlemleri 2)
area admindeki city controllerda

 private readonly IDestinationService _destinationService;

        public CityController(IDestinationService destinationService)
        {
            _destinationService = destinationService;
        }

değişikliklerini yaptıktan sonra

public IActionResult CityList()
        {
            var jsonCity = JsonConvert.SerializeObject(_destinationService.TGetList());
            return Json(jsonCity);
        }

olrak güncelledik ve tabloyuda düzenledikten sonra destination daki bilgilerin geldiğini gördük.

Daha sonra şehir ekleme kısmı için CityController'da 

[HttpPost]
        public IActionResult AddCityDestination(Destination destination)
        {
            destination.Status = true;
            _destinationService.TAdd(destination);
            var values = JsonConvert.SerializeObject(destination);
            return Json(destination);
        }

ardından admin.jste

$("#cityBtnAddCity").click(function () {
    let cityvalues = {
        City: $("#txtcity").val(),
        DayNight: $("#txtdaynight").val(),
        Price: $("#txtprice").val(),
        Capacity: $("#txtcapacity").val()
    };

    $.ajax({
        type: "post",
        url: "/Admin/City/AddCityDestination/",
        data: cityvalues,
        success: function (data) {
            let result = jQuery.parseJSON(data);
            alert("Şehir - Rota başarılı bir şekilde eklendi.")
        }
    });
});

güncellemelerini yaptık ve sonra Index'inde

 <div class="">
        <input class="form-control mb-2"
               type="text"
               id="txtcity"
               placeholder="Şehirin adı nedir?" />
        <input class="form-control mb-2"
               type="text"
               id="txtdaynight"
               placeholder="Kalınacak Gece / Gün sayısı ?" />
        <input class="form-control mb-2"
               type="text"
               id="txtprice"
               placeholder="Bu rotanın fiyatı ne kadar?" />
        <input class="form-control mb-2"
               type="text"
               id="txtcapacity"
               placeholder="Konaklayacak kişi kapasitesi kaçtır?" />
    </div>

yaptıktan sonra şehirin sql'e eklendiğini gördük.

Devamında id'ye göre getirme işlemi için CityController'da

public IActionResult GetByID(int id)
        {
            var values = _destinationService.TGetByID(id);
            var jsonValues = JsonConvert.SerializeObject(values);
            return Json(values);
        }

ardından admin.js'te

$("#cityBtnGetByID").click(x => {
    let id = $("txtid").val();

    $.ajax({
        contentType: "application/json",
        dataType: "json",
        type: "Get",
        url: "/Admin/City/GetByID",
        data: { DestinationID: id },
        success: function (data) {
            let result = jQuery.parseJSON(data);
            console.log(result);
            let htmlstr = `<table class= table table-hover text - center> <thead><tr><th> ŞEHİR ADI </th> <th> GECE / GÜN </th> <th> FİYAT </th> </tr></thead>
             <tbody class="table-border-bottom-0 text-center"> <tr><td>${result.City}</td><td>${result.DayNight}</td> <td>${result.Price} ₺</td></tr></tbody>`;
            $("#destinationListByID").html(htmlstr);
        }
    });
});

ve devamında indexte

<div class="table-responsive text-nowrap" id="citylist">
        <input class="form-control mb-2"
               type="text"
               id="txtid"
               placeholder="Şehirin ID değeri" />
    </div>

    <div id="destinationListByID">
    </div>

yaptık ama gelmedi bir sonraki derste tamamlayacağız.

# 65 Ders (Ajax İşlemleri 3)
CityController'ı

public IActionResult GetByID(int DestinationID)
        {
            var values = _destinationService.TGetByID(DestinationID);
            var jsonValues = JsonConvert.SerializeObject(values);
            return Json(jsonValues);
        }

şeklinde güncelleyince hata düzeldi.

Şimdi sırada silme işlemi var. Silme ve güncelleme işlemleri için CityController'a

public IActionResult DeleteCity(int id)
        {
            var values = _destinationService.TGetByID(id);
            _destinationService.TDelete(values);
            return NoContent();
        }

        public IActionResult UpdateCity(Destination destination)
        {
            var values = _destinationService.TGetByID(destination.DestinationID);
            _destinationService.TUpdate(values);
            var v = JsonConvert.SerializeObject(values);
            return Json(v);
        }

değişikliklerini yapıp admin js te

$("#cityBtnDeleteCity").click(x => {
    let id = $("#txtcityid").val();

    $.ajax({
        url: "/Admin/City/DeleteCity/" + id,
        type: "post",
        contentType: "application/json",
        dataType: "json",
        success: function (data) {
            alert("Şehir silindi.")
        }
    });
});

yaptıktan sonra update kısmı içinde

$("#cityBtnUpdateCity").click(function () {
    let values = {
        DestinationID: $("#txtcityeditid").val(),
        City: $("#txtcityname").val(),
        DayNight: $("#txtcitydaynight").val()
    };

    $.ajax({
        type: "post",
        url: "/Admin/City/UpdateCity",
        data: values,
        success: function (data) {
            alert("Güncelleme işlemi yapıldı.")
        }
    });
});

yazıyoruz daha sonrasında index tarafında

<div class="table-responsive text-nowrap">
        <input class="form-control mb-2"
               type="text"
               id="txtcityid"
               placeholder="Silinecek şehirin ID değeri" />
    </div>

    <div class="table-responsive text-nowrap">
        <input class="form-control mb-2"
               type="text"
               id="txtcityeditid"
               placeholder="Güncellenecek şehirin ID değeri" />
        <input class="form-control mb-2"
               type="text"
               id="txtcityname"
               placeholder="Güncellenecek şehirin adı nedir?" />
        <input class="form-control mb-2"
               type="text"
               id="txtcitydaynight"
               placeholder="Güncellenecek şehirin gün bilgileri nedir?" />
    </div>

değişikliklerini yapıyoruz ve dersi bitiriyoruz.

# 66 Ders (Data Transfer Object (DTO) Katmanı)
Bu derste DTO katmanı ekleyeceğiz.
Bu katmanda model klasörü üzerinde çalışmıycaz. Bunların tamamı data transör object katmanında yer alan DTOs klasörünün üzerine çalışıcaz.

Öncelikle Solition üstüne sağ tıkk add new project deyip class library seçiyoruz ve adını DTOLayer koyuyoruz. İçinde default gelen class'ı silip şu klasörleri ve içlerinede şu classları ekliyoruz.

-> AppUserDTOs
    - AppUserLoginDTOs
    - AppUserRegisterDTOs

-> CityDTOs
    - CityAddDTOs

-> ContactDTOs
    -

-> DestinationDTOs
    - DestinationAddDTOs

-> MailDTOs
    - MailRequestDTOs

bu işlemleri yaptıktan sonra BusinessLayer sağ tık add project reference diyip Dto katmanını ekliyoruz.

Devamında BusineesLayer'da ValidationRule işçe new class AppUserRegisterValidator ekliyoruz ve içini Dto katmanındaki AppUserRegisterValidator e göre dolduruyoruz.

Bundan sonra ContactUs kısmına geçiyoruz öncelikle EntityLayerdaki Concrete içine new class ContactUs ekliyoruz. Devamında DataAccessLayer Concrete içindeki Contextte bunu tanımlayıp ardından migration işlemine geçiyoruz.
Devamında Admin areasına ContactUsController ekleyil DataAccessLayer katmanındaki Absract klasörüne IContactUsDal adlı interfaceyi, EntityFremework klasörünede EfContactUsDal adlı classı ekliyoruz.

Devamında BusniessLayerde Abstract klasörü içine IContactUsService interface ekleyip Concrete içine ConctactUsMAnager classını ekliyoruz ne imlement interface ediyoru ve Containerda tanımlıyoruz(new lememek için).

Sonrasında ContactUsController ında

private readonly IContactUsService _contactUsService;

        public ContactUsController(IContactUsService contactUsService)
        {
            _contactUsService = contactUsService;
        }

        public IActionResult Index()
        {
            var values = _contactUsService.TGetList();
            return View();
        }

değişikliklerini yapıp add view diyoruz. Açtığımız index'i düzenledikten sonra ContactUs Entitysine Status propertysini ekleyip migration yaptık. Bu işlemden sonra IContacUsDal'da

List<ContactUs> GetListContactUsByTrue();
List<ContactUs> GetListContactUsByFalse();
void ContactUsStatusChangeToFalse(int id);

yapıp EfContactUsDal'da

public void ContactUsStatusChangeToFalse(int id)
        {
            throw new NotImplementedException();
        }

        public List<ContactUs> GetListContactUsByFalse()
        {
            using (var context = new Context())
            {
                var values = context.ContactUses.Where(x => x.MessageStatus == false).ToList();
                return values;
            }
        }

        public List<ContactUs> GetListContactUsByTrue()
        {
            using (var context = new Context())
            {
                var values = context.ContactUses.Where(x => x.MessageStatus == true).ToList();
                return values;
            }
        }

yapıyoruz.

Ardında BusinessLayer da IContactUsService'de

List<ContactUs> TGetListContactUsByTrue();
List<ContactUs> TGetListContactUsByFalse();
void TContactUsStatusChangeToFalse(int id);

ve devamında ContactUsManager'de implement edip

public List<ContactUs> TGetListContactUsByFalse()
        {
            return _contactUsDal.GetListContactUsByFalse();
        }

        public List<ContactUs> TGetListContactUsByTrue()
        {
            return _contactUsDal.GetListContactUsByTrue();
        }

şeklinde dolduruyoruz. Devamında ContactUsControllerda

public IActionResult Index()
        {
            var values = _contactUsService.TGetListContactUsByTrue();
            return View(values);
        }

yaptığımızda true olanlar gelecek ve sile bastığımızda durumu false olacak yani silinmiycek.

# 67 Ders (DTO Katmanı ve Auto Mapper)
Bu derste öncelikle Entity katmanına Announcement classını ekliyoruz ve context'te bunu tanımladıktan sonra migration yapıyoruz. Migrationdan sonra DataAccessLayer ve BusinessLayer katmanlarında Announcement sınıfının interface ve sınıflarını açıyoruz.
Bu işlerim yaptıktan sonra Admin areada AnnouncementController açtık ve içini doldurduk daha sonra DTOs katmanına yeni bir dosya ekledik.

-> AnnouncementDTOs
    - AnnouncementAddDTOs

bu işlemleri yaptıktan sonra Busniness içindeki ValidationRule klasörüne AnnouncementValidator classını ekleyip içini dolduruyoruz. Sonra UI Katmanına 
-> AutoMapper.Extensions.Microsoft.DependencyInjection(12.0.0) paketini kuruyoruz.

Sonrasında UI Katmanına Mapping adlı klasörü içine AutoMapperProfile adlı klasörü ne onun içine de MapProfile adlı classı'ı ekliyoruz.

startupta 
services.AddAutoMapper(typeof(Startup));
services.AddTransient<IValidator<AnnouncementAddDTOs>, AnnouncementValidator>();
ile güncelleme yaptık.
Ayrıca bunu güncelledik. services.AddControllersWithViews().AddFluentValidation(); son kısmı yazmıyordu onu ekledik.

Daha sonra Are admindeki model klasörüne AnnouncementListViewModel classını ekledik. Sql de Announcement klasörüne veri girişi yaptık. Daha Sonra area admindeki AnnouncementController da

public IActionResult Index()
        {
            List<Announcement> announcements = _announcementService.TGetList();
            List<AnnouncementListViewModel> model = new List<AnnouncementListViewModel>();
            foreach (var item in announcements)
            {
                AnnouncementListViewModel announcementListViewModel = new AnnouncementListViewModel();
                announcementListViewModel.ID = item.AnnouncementID;
                announcementListViewModel.Title = item.Title;
                announcementListViewModel.Content = item.Content;

                model.Add(announcementListViewModel);
            }
            return View(model);
        }

güncellemesini yapıyoruz. Bu güncellemeden sonra Index ekleyip tablo yapısı kurduk. Verilerin geldiğini gördük.

# 68 Ders (Dto Katmanı ve Auto Mapper 2)
Şimdi bu derste ilk olarak AnnouncementController de

 private readonly IMapper _mapper;

        public AnnouncementController(IAnnouncementService announcementService, IMapper mapper)
        {
            _announcementService = announcementService;
            _mapper = mapper;
        }

güncellemesini yapıyoruz. _mapper = mapper; kısmını ctor'a dahil edebilmek için _mapper ctrl+ . diyerek add parameters.. diyoruz. Devamında Dto katmanındaki AnnouncementDTOs'a AnnouncementListDTO class ekliyoruz ve ardından Controller'a dönüp

public IActionResult Index()
        {
            var values = _mapper.Map<List<AnnouncementListDTO>>(_announcementService.TGetList());
            return View(values);
        }

şeklinde indexi kısmını güncelliyoruz. Daha sonrasında indexe gidip daha önce modelden çağırdığımız kısmı

@model List<DTOLayer.DTOs.AnnouncementDTOs.AnnouncementListDTO>

olarak güncelliyoruz. Bu güncellemeleri yaptıktan sonra Index'i çalıştırınca Id kısmının 0 gelldiğini gördük bunu düzeltmek için AnnouncementListDTO da ID kısmını AnnouncementID olarak güncelliyoruz. Id kısmınında düzeldiğini gördük bu şekilde. Devamında AddAnnouncement kısmı için Announcement controllerda

  [HttpGet]
        public IActionResult AddAnnouncement()
        {
            return View();
        }

        [HttpPost]
        public IActionResult AddAnnouncement(AnnouncementAddDTO model)
        {
            if (ModelState.IsValid)
            {
                _announcementService.TAdd(new Announcement()
                {
                    Content = model.Content,
                    Title = model.Title,
                    Date = Convert.ToDateTime(DateTime.Now.ToShortDateString())
                });
                return RedirectToAction("Announcement", "Admin");
            }
            return View();
        }

güncellemesini yaptıktan sonra view oluşturup içine form yapısını kuruyoruz. Bu form yapısını çalıştırıp test ettiğimizde eklendiğini gördük. Startup'ta

services.AddTransient<IValidator<AnnouncementAddDTO>, AnnouncementValidator>(); kodunu kesip BusinessLAyerdaki Container içine

  public static void CustomerValidator(this IServiceCollection services)
        {
            services.AddTransient<IValidator<AnnouncementAddDTO>, AnnouncementValidator>();

        }
          
şeklinde yazarak yerinede services.CustomerValidator(); kodu ile çağırdık.

Sonrasında DeleteAnnouncement kısmını yaptık.

Devamında UptadeAnnouncement için controller'ı yazmadan önce Dto katmanına AnnouncementDTOs içine new class AnnouncementUpdateDTO oluşturduk devamında controller'ını 

[HttpGet]
        public IActionResult UpdateAnnouncement(int id)
        {
            var values = _mapper.Map<AnnouncementUpdateDTO>(_announcementService.TGetByID(id));
            return View(values);
        }

        [HttpPost]
        public IActionResult UpdateAnnouncement(AnnouncementUpdateDTO model)
        {
            if (ModelState.IsValid)
            {
                _announcementService.TUpdate(new Announcement
                {
                    AnnouncementID = model.AnnouncementID,
                    Content = model.Content,
                    Title = model.Title,
                    Date = Convert.ToDateTime(DateTime.Now.ToShortDateString())
                });
                return RedirectToAction("Announcement", "Admin");
            }
            return View(model);

        }

şeklinde yazdık ve ardında index ekledik. Ardından UI Katmanındaki mapping içine

CreateMap<AnnouncementUpdateDTO, Announcement>();
CreateMap<Announcement, AnnouncementUpdateDTO>();

 kodlarını ekledik.

 Devamında BusinessLayer içindeki ValidationRule içine AnnouncementValidationRules klasörünü içine AnnouncementUpdateValidator clasını ekleyip kuralları yazdık. Update kısmının İndexini oluşturduktan sonra test ettik ve oldu.

 # 69 Ders (Api Projesi)
Yeni bir proje açıyoruz adı TraversalApiProject ve Asp.Net Wep Api seçiyoruz. Confugure kutucuğunu seçili değil yapıyoruz. Sonrasında yeni bir APİ Controller VisitorController ekledik. Bu işlemden sonra projeye 

-> DAL 
	- VisitorContext (class)
-> Entities
	- Visitor (class) (İçini sütun adları ile doldurduk.)

Sonra projeye şu paketleri yükledik.

-> Microsoft.EntityFrameworkCore (5.0.17)
-> Microsoft.EntityFrameworkCore.Design (5.0.17)
-> Microsoft.EntityFrameworkCore.SqlServer (5.0.17)
-> Microsoft.EntityFrameworkCore.Tools (5.0.17)

sonrasında VisitorContext'te yeni bir Database oluşturmak için 

public class VisitorContext : DbContext
    {
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer("server=(localdb)\\MSSQLLOCALDB;initial catalog=TraversalDBApi;integrated security=true;");
        }
        public DbSet<Visitor> Visitors { get; set; }
    }

kodunu yadıktan sonra migration yaptık. Daha sonra sql'de oluşan tabloya veri girişi yapıp VisitorController'da 

[HttpGet]
        public IActionResult VisitorList()
        {
            using (var Context = new VisitorContext())
            {
                var values = Context.Visitors.ToList();
                return Ok(values);
            }
        }

kodunu yazdıktantan sonra F5 ile çalıştırıp Execute edince sqldeki bilgilerin ekrane geldiğini gördük. Devamında AddVisitor işlemi için VisitorController'da 

[HttpPost]
        public IActionResult VisitorAdd(Visitor visitor)
        {
            using (var context = new VisitorContext())
            {
                context.Add(visitor);
                context.SaveChanges();
                return Ok();
            }
        }

yazıp çalıştırdık. İlk kısmımda gelen Weather'ı Controller'ında yorum satır yaptık. Az önce sadece GET kısmı gelirken artık POST kısmınında geldiğini gördük. Bu gelen post kısmına tıklayıp Try it out tıkladık ve açılan kısma verileri girdik bu bilgilerin hem GET kısmında hemde sql tablosuna kayıt işleminin başalırılı (200) bir şekilde geldiğini gördük.

Daha sonra idye göre getirme işlemi için VisitorController'da

[HttpGet("{id}")]
        public IActionResult VisitorGet(int id)
        {
            using (var context = new VisitorContext())
            {
                var values = context.Visitors.Find(id);
                if (values == null)
                {
                    return NotFound();
                }
                else
                {
                    return Ok(values);
                }
            }
        }

yazdık ve F5 ile çalıştırdığımızda try it out diyip istediğimiz verinin geldiğini, sadece sayı yazılabildiğini ve olmayan veri için hata (404(Not Found)) döndüğünü gördük.

Silme işlemi içinde 

[HttpDelete("{id}")]
        public IActionResult VisitorDelete(int id)
        {
            using (var context = new VisitorContext())
            {
                var values = context.Visitors.Find(id);
                if (values == null)
                {
                    return NotFound();
                }
                else
                {
                    context.Remove(values);
                    context.SaveChanges();
                    return Ok();
                }
            }
        }

controllerını yazıp yine id'ye göre silme işlemi yaptık.

Son olarak güncelleme işlemi için

[HttpPut]
        public IActionResult VisitorUpdate(Visitor visitor)
        {
            using (var context = new VisitorContext())
            {
                var values = context.Find<Visitor>(visitor.VisitorID);
                if (values == null)
                {
                    return NotFound();
                }
                else
                {
                    values.Name = visitor.Name;
                    values.Surname = visitor.Surname;
                    values.City = visitor.City;
                    values.Country = visitor.Country;
                    values.Mail = visitor.Mail;

                    context.Update(values);
                    context.SaveChanges();
                    return Ok();
                }
            }
        }

yapıp güncellemek istediğimiz bilgileri girdiğimizde güncellendiğini gördük.

# 70 Ders (Api Projesinin Ana Projede Kullanılması)
Bu ders çok önemli bu derste yeni proje ile eskisini bağlıycaz. Aradaki configurasyon'u sağlamak için

straptupta;

public void ConfigureServices(IServiceCollection services)
        {

            services.AddControllers();
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo { Title = "TraversalApiProject", Version = "v1" });
            });

            services.AddCors(opt =>
            {
                opt.AddPolicy("TraversalApiCors", opts =>
                {
                    opts.AllowAnyOrigin().AllowAnyHeader().AllowAnyMethod();
                });
            });
        }

-> opt.AddPolicy()
    - Bir güvenlik politikası oluşturuyor.
-> opts.AllowAnyOrigin()
    - Herhangi bir kaynağa izin verir.
-> AllowAnyHeader()
    - Herhangi bir içerik türüne (json xml vs.) izin verir.
-> AllowAnyMethod();
    - Herhangi bir methoda izin verir.

kısmını güncelliyoruz. ( Burda kod ekledik. 0'dan yazmadık.)

56. Satırada şu kodu ekliyoruz.

app.UseCors("TraversalApiCors");

VisitorController'da da

[EnableCors]

kodu ile startup'ı çağırıyoruz.

Daha sonra TraversalCoreProje'ye geri dönüp startup tarafında 

39. satıra

services.AddHttpClient();

kodunu yazdık. Bu kodun ardından admin aresında bir controller VisitorApiController açtık.

private readonly IHttpClientFactory _httpClientFactory;

        public VisitorApiController(IHttpClientFactory httpClientFactory)
        {
            _httpClientFactory = httpClientFactory;
        }

        [HttpGet]
        public async Task<IActionResult> Index()
        {
            var client = _httpClientFactory.CreateClient();
            var responseMessage = await client.GetAsync("http://localhost:54721/api/Visitor");
            if (responseMessage.IsSuccessStatusCode)
            {
                var jsonData = await responseMessage.Content.ReadAsStringAsync();
                var values = JsonConvert.DeserializeObject<List<>>(jsonData);
            }
            return View();
        }

controller'ı bu şekilde doldurduktan sonra

Admin areadaki model klasörüne VisitorViewModel classını ekleyip içindeki propertyleri Api projesinden aldıktan sonra VisitorApiController'ı

[HttpGet]
        public async Task<IActionResult> Index()
        {
            var client = _httpClientFactory.CreateClient();
            var responseMessage = await client.GetAsync("http://localhost:54721/api/Visitor");
            if (responseMessage.IsSuccessStatusCode)
            {
                var jsonData = await responseMessage.Content.ReadAsStringAsync();
                var values = JsonConvert.DeserializeObject<List<VisitorViewModel>>(jsonData);
                return View(values);
            }
            return View();
        }

şeklinde güncelliyoruz. Bu işlemin ardından View ekliyoruz. Açtığımız View'e tablo yapısnı yazıyoruz ve verilerin geldiğini görüyoruz ardından ekleme işlemi için controller tarafında

[HttpGet]
        public IActionResult AddVisitor()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> AddVisitor(VisitorViewModel visitorViewModel)
        {
            var client = _httpClientFactory.CreateClient();
            var jsonData = JsonConvert.SerializeObject(visitorViewModel);
            StringContent content = new StringContent(jsonData, Encoding.UTF8, "application/json");
            var responseMessage = await client.PostAsync("http://localhost:54721/api/Visitor", content);

            if (responseMessage.IsSuccessStatusCode)
            {
                return RedirectToAction("VisitorApi", "Admin");
            }
            return View();
        }

controllerını ekliyoruz ve view ekliyoruz. Eklediğimiz bu view'e form yapısını kurduktan sonra ekleme işleminin yapıldığını görüyoruz. Ardından silme işlemi için controller'a

public async Task<IActionResult> DeleteVisitor(int id)
        {
            var client = _httpClientFactory.CreateClient();
            var responseMessage = await client.DeleteAsync($"http://localhost:54721/api/Visitor/{id}");

            if (responseMessage.IsSuccessStatusCode)
            {
                return RedirectToAction("VisitorApi", "Admin");
            }
            return View();
        }

yazdık ve devamında güncelleme işlemi için controller'da

[HttpGet]
        public async Task<IActionResult> UpdateVisitor(int id)
        {
            var client = _httpClientFactory.CreateClient();
            var responseMessage = await client.GetAsync($"http://localhost:54721/api/Visitor/{id}");

            if (responseMessage.IsSuccessStatusCode)
            {
                var jsonData = await responseMessage.Content.ReadAsStringAsync();
                var values = JsonConvert.DeserializeObject<VisitorViewModel>(jsonData);
                return View(values);
            }
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> UpdateVisitor(VisitorViewModel visitorViewModel)
        {
            var client = _httpClientFactory.CreateClient();
            var jsonData = JsonConvert.SerializeObject(visitorViewModel);
            StringContent content = new StringContent(jsonData, Encoding.UTF8, "application/json");
            var responseMessage = await client.PutAsync("http://localhost:54721/api/Visitor", content);

            if (responseMessage.IsSuccessStatusCode)
            {
                return RedirectToAction("VisitorApi", "Admin");
            }
            return View();
        }

kısmını yazdık ve index ekledik index'e add sayfasının formunu kopyaladık ama ID'yi inputla gizledik ve güncelle işlemini de başarı ile tamamladık.

# 71 Ders (Api Projesinin Ana Projede Kullanılması)
https://rapidapi.com sitesine üye olduk. Devamında App tagına tılayıp add New App dedik ve MyNewApi isimli yeni uygulamayı oluşturduk. Devamında anasayfaya gelip IMDB Top 100 Movies Apisine tıkladık. Daha sonra Subscribe To Test'e tıklayıp ücretsiz kısımdan üye olduk. Devamında en sağdaki kısımdan C# -> HttpClient'i seçtik ve bu kodu kopyalayıp Admin arasında açtığımız ApiMovieController'ın içine yapıştırıyoruz. Ardından bir index ekliyoruz ve Admina areasında ApiMovieViewModel classını oluşturup propertyler yazıp controller tarafını;

public async Task<IActionResult> Index()
        {
            List<ApiMovieViewModel> apiMovie = new List<ApiMovieViewModel>();
            var client = new HttpClient();
            var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri("https://imdb-top-100-movies.p.rapidapi.com/"),
                Headers =
    {
        { "X-RapidAPI-Key", "472f5d6472msh5b1ff28add5cf26p150d4djsn92308d4186f5" },
        { "X-RapidAPI-Host", "imdb-top-100-movies.p.rapidapi.com" },
    },
            };
            using (var response = await client.SendAsync(request))
            {
                response.EnsureSuccessStatusCode();
                var body = await response.Content.ReadAsStringAsync();
                Console.WriteLine(body);
                apiMovie = JsonConvert.DeserializeObject<List<ApiMovieViewModel>>(body);
                return View(apiMovie);
            }
        }

şeklinde güncelliyoruz.

Eklediğimiz index sayfasına gerekli tablo yapısını kurduktan sonra bu filmlerin geldiğini görüyoruz.

Daha sonra bu api çekme işlemini Booking.com başlıklı kısmından exchange api si için tekrarlayacağız. Öncelikle bu uygulamanın ücretsiz kısmını alıp yine C# -> HttpClient kısmını kopyalayıp admin areasında açtığımız ApiExchangeController 'a yapıştırıyoruz. Sonrasında BookingExchangeViewModel classını model kalsörüne ekleyip isimleri birebir aynı olacak şekilde dolduruyoruz. Controller'ı da

public async Task<IActionResult> Index()
        {
            List<BookingExchangeViewModel> bookingExchangeViewModels = new List<BookingExchangeViewModel>();
            var client = new HttpClient();
            var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri("https://booking-com.p.rapidapi.com/v1/metadata/exchange-rates?currency=AED&locale=en-gb"),
                Headers =
    {
                { "X-RapidAPI-Key", "472f5d6472msh5b1ff28add5cf26p150d4djsn92308d4186f5" },
        { "X-RapidAPI-Host", "booking-com.p.rapidapi.com" },
    },
            };
            using (var response = await client.SendAsync(request))
            {
                response.EnsureSuccessStatusCode();
                var body = await response.Content.ReadAsStringAsync();
                Console.WriteLine(body);
                bookingExchangeViewModels = JsonConvert.DeserializeObject<List<BookingExchangeViewModel>>(body);
                return View(bookingExchangeViewModels);
            }
        }

şekliden doldurup index ekliyoruz ve hata alıyoruz "Nested??" bu hatayı düzeltmek için
yeni bir model BookingExchangeViewModel2 oluşturduk ve burdaki kodları Rapid apide en solda ki result tan copy code ye basıp model açıkken Edit -> Paste Special -> Paste JSON as Classes ile yapıştırıp ilk kısmın public ini sildik sadece içindeki propertiler kaldı ve controller'da

 public async Task<IActionResult> Index()
        {
            List<BookingExchangeViewModel2> bookingExchangeViewModel2 = new List<BookingExchangeViewModel2>();
            var client = new HttpClient();
            var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri("https://booking-com.p.rapidapi.com/v1/metadata/exchange-rates?currency=AED&locale=en-gb"),
                Headers =
    {
                { "X-RapidAPI-Key", "472f5d6472msh5b1ff28add5cf26p150d4djsn92308d4186f5" },
        { "X-RapidAPI-Host", "booking-com.p.rapidapi.com" },
    },
            };
            using (var response = await client.SendAsync(request))
            {
                response.EnsureSuccessStatusCode();
                var body = await response.Content.ReadAsStringAsync();
                Console.WriteLine(body);
                var values = JsonConvert.DeserializeObject<BookingExchangeViewModel2>(body);
                return View(values.exchange_rates);
            }
        }

güncellemesini yapıp index'te bu modeli

@model IEnumerable<BookingExchangeViewModel2.Exchange_Rates>

ile bu array'ı çağırdık ve tablo yapısını oluşturup verilerin geldiğini gördük.

# 72 Ders (Rapid Api Booking Üzerinden Otel Listesi Çekme)
Bu derste öncelikle RapidApi -> Booking.com -> Hotels -> Search Hotels'de gerekli ayarlamaları yapıp C# -> HttpClient i kopyalayıp açtığımız BookingHotelSearchController a yapıştırıyoruz ve ardından BookingHotelSearchViewModel modeline resulttaki kodu kopyalayıp Json türünde özel olarak yapıştırıyoruz. Devamında controller'a

public class BookingHotelSearchController : Controller
    {
        public async Task<IActionResult> Index()
        {
            var client = new HttpClient();
            var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri("https://booking-com.p.rapidapi.com/v1/hotels/search?adults_number=2&dest_type=city&filter_by_currency=EUR&checkout_date=2023-03-15&checkin_date=2023-03-14&order_by=popularity&locale=en-gb&dest_id=-1456928&units=metric&room_number=1&categories_filter_ids=class%3A%3A2%2Cclass%3A%3A4%2Cfree_cancellation%3A%3A1&children_number=2&children_ages=5%2C0&include_adjacency=true"),
                Headers =
    {
        { "X-RapidAPI-Key", "472f5d6472msh5b1ff28add5cf26p150d4djsn92308d4186f5" },
        { "X-RapidAPI-Host", "booking-com.p.rapidapi.com" },
    },
            };
            using (var response = await client.SendAsync(request))
            {
                response.EnsureSuccessStatusCode();
                var body = await response.Content.ReadAsStringAsync();
                Console.WriteLine(body);


                var values = JsonConvert.DeserializeObject<BookingHotelSearchViewModel>(body);
                return View(values.result);
            }
        }
    }

yazıp açtığımız index'e 

@model IEnumerable<BookingHotelSearchViewModel.Result>

olarak modeli çağırıyoruz. Devamında int olan değişkende "." olmasından dolayı hata alıyoruz ve controller'ı

public class BookingHotelSearchController : Controller
    {
        public async Task<IActionResult> Index()
        {
            var client = new HttpClient();
            var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri("https://booking-com.p.rapidapi.com/v1/hotels/search?adults_number=2&dest_type=city&filter_by_currency=EUR&checkout_date=2023-03-15&checkin_date=2023-03-14&order_by=popularity&locale=en-gb&dest_id=-1456928&units=metric&room_number=1&categories_filter_ids=class%3A%3A2%2Cclass%3A%3A4%2Cfree_cancellation%3A%3A1&children_number=2&children_ages=5%2C0&include_adjacency=true"),
                Headers =
    {
        { "X-RapidAPI-Key", "472f5d6472msh5b1ff28add5cf26p150d4djsn92308d4186f5" },
        { "X-RapidAPI-Host", "booking-com.p.rapidapi.com" },
    },
            };
            using (var response = await client.SendAsync(request))
            {
                response.EnsureSuccessStatusCode();
                var body = await response.Content.ReadAsStringAsync();
                var bodyReplace = body.Replace(".", "");
                var values = JsonConvert.DeserializeObject<BookingHotelSearchViewModel>(bodyReplace);
                return View(values.result);
            }
        }
    }

olarak güncelledik. İndex tarafında da

@{
   score = double.Parse(item.review_score.ToString()) / 10;
 }
<td>@score</td> 

kodunu yazdık. 
Kelimeleri türkçeye çevirmek için RapidApi'den V2 Search Hotels Api kısmında locale kısmını açıp çıkan dropdowndan "tr"'yi seçmeniz ve method içerisinde request urlsini buna göre değiştirmeniz yeterli olacaktır, kelimeleri kendisi türkçeleştiriyor.

Devamında şehiri seçebilmek için Controller'da

[HttpGet]
        public IActionResult GetCityDestID()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> GetCityDestID(string p)
        {
            var client = new HttpClient();
            var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri($"https://booking-com.p.rapidapi.com/v1/hotels/locations?locale=tr&name={p}"),
                Headers =
    {
        { "X-RapidAPI-Key", "472f5d6472msh5b1ff28add5cf26p150d4djsn92308d4186f5" },
        { "X-RapidAPI-Host", "booking-com.p.rapidapi.com" },
    },
            };
            using (var response = await client.SendAsync(request))
            {
                response.EnsureSuccessStatusCode();
                var body = await response.Content.ReadAsStringAsync();
                return View();
            }
        }

yazıyoruz ve index ekleyip dersi bitiriyoruz.

# 73 Ders (CQRS Design Pattern Kullanılması) (Tekrar edilecek.)
UI Katmanına aşağıdaki klasör yapılanmasını oluşturuyoruz.

-> CQRS
    
    - Commands
        
    - Handlers
        - DestinationHandlers
            - GetAllDestinationQueryHandler.cs

    - Queries
        - DestinationQueries
            - GetAllDestinationQuery.cs

    - Result
        - DestinationResults
            - GetAllDestinationQueryResult.cs

devamında admin areasına DestinationCQRSController ekliyoruz. Controller'ı

private readonly GetAllDestinationQueryHandler _getAllDestinationQueryHandler;

        public DestinationCQRSController(GetAllDestinationQueryHandler getAllDestinationQueryHandler)
        {
            _getAllDestinationQueryHandler = getAllDestinationQueryHandler;
        }

        public IActionResult Index()
        {
            var values = _getAllDestinationQueryHandler.Handle();
            return View(values);
        }

şeklinde doldurup startupta

services.AddScoped<GetAllDestinationQueryHandler>();

ile çağırıyoruz.

Daha sonra index ekleyip bu indexin içine tablo yapısı oluşturuyoruz. @using'i kullanmamak i.in viewimporta
@using TraversalCoreProje.CQRS.Result.DestinationResult
dahil ettik.

Devamında CQRS dosyasının içindeki Result - DestinationResults içine GetDestinationByIDQueryResult ve Queries - DestinationQueries içine GetDestinationByIDQuery classlarını ekledik. Ardından Handlers - DestinationHandlers içine de GetDestinationByIDQueryHandler classını ekledik.

private readonly GetAllDestinationQueryHandler _getAllDestinationQueryHandler;
        private readonly GetDestinationByIDQueryHandler _getDestinationByIDQueryHandler;

        public DestinationCQRSController(GetAllDestinationQueryHandler getAllDestinationQueryHandler, GetDestinationByIDQueryHandler getDestinationByIDQueryHandler)
        {
            _getAllDestinationQueryHandler = getAllDestinationQueryHandler;
            _getDestinationByIDQueryHandler = getDestinationByIDQueryHandler;
        }

        public IActionResult Index()
        {
            var values = _getAllDestinationQueryHandler.Handle();
            return View(values);
        }

        public IActionResult GetDestination(int id)
        {
            var values = _getDestinationByIDQueryHandler.Handle(new GetDestinationByIDQuery(id));
            return View(values);
        }

controller'ı bu şekilde güncelledik ve gelen hatayı GetDestinationByIDQuery clasında generate constructor diyerek çözdük ve index ekledik. dersi burda sonlandırdık.

# 74 Ders (CQRS Design Pattern Kullanılması - 2)

Açtığımız indexi güncelleme kısmı için kullanıcaz bu yüzden ilk olarak controller'ı Httpget yaptık ve form yapısını kurduk bu formun açılması için

services.AddScoped<GetDestinationByIDQueryHandler>();

kodunu ekledik.
Devamında AddDestination için Commands - DestinationCommands içine CreateDestinationCommand class ekliyoruz. Bu classtan sonra Handlers - DestinationHandlers içine CreateDestinationCommandHandler clasınıda ekleyip DestinationCQRSController içine

        [HttpGet]
        public IActionResult AddDestination()
        {
            return View();
        }

        [HttpPost]
        public IActionResult AddDestination(CreateDestinationCommand command)
        {
            _createDestinationCommandHandler.Handle(command);
            return RedirectToAction("DestinationCQRS", "Admin");
        }

ekleyip index ekliyoruz. İndexe form yapısını kurup startupta controller'a readonly ile eklediğimiz herşeyi tanıtıyoruz. Add kısmını test ediyoruz.

Silme işlemi için yukarıdaki işlemleri tekrarlıyoruz.
Güncelleme işlemi içinde aynı işlemleri yapıyoruz.

<-- Startup tarafı çok önemli -->

(KAYDETMEDEN KAPATTIĞIM KISIM 74.DERSTE EKSİKLER OLABİLİR BAKACAĞIM.)

# 75 Ders (MediatR Kütüphanesi)
İlk olarak admin areasına yeni bir GuideMediatRController ekledik. DestinationMediatr. Devamında UI Katmanına
->MediatR.Extensions.Microsoft.DependencyInjection (11.1.0) paketini yükledik.
Devamında CQRS klasöründe
Result içine GuideResult klasörünü içine GetAllGuideQueryResult classını ekledik.
Queries içine GuideQueries klasörünü içine GetAllGuideQuery classını ekledik.
Handlers içine GuideHandlers klasörünü içine GetAllGuideQueryHandler classını ekledik.

Devamında GuideMediatRController'e geçiyoruz.

[Area("Admin")]
    [AllowAnonymous]
    public class GuideMediatRController : Controller
    {
        private readonly IMediator _mediator;

        public GuideMediatRController(IMediator mediator)
        {
            _mediator = mediator;
        }

        public async Task<IActionResult> Index()
        {
            var values = await _mediator.Send(new GetAllGuideQuery());
            return View(values);
        }
    }

controller'ı bu şekilde güncelledikten sonra index ekleyip tablo yapısını kuruyoruz.
@model List<GetAllGuideQueryResult> kodunu kullanabilmek için Viewimportta yol belirttik. Listeleme işlemini yaptıktan sonra idye göre getirme işlemine geçtik ve
GuideResult -> GetGuideByIDQueryResult
GuideQueries -> GetGuideByIDQuery
GuideHandlers -> GetGuideByIDQueryHandler

classlarını ekleyip doldurduk.

Daha sonra Controller'da

 [HttpGet]
        public async Task<IActionResult> GetGuides(int id)
        {
            var values = await _mediator.Send(new GetGuideByIDQuery(id));
            return View(values);
        }

ekledik ve index ekleyip form yapısı kurduk.

Devamında  Commands -> GuideCommands -> CreateGuideCommand ve ardından GuideHandlers -> CreateGuideCommandHandle classlarını ekledik.

Bu işlemlerden sonra controller'a geçip

 [HttpGet]
        public IActionResult AddGuide()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> AddGuide(CreateGuideCommand command)
        {
            await _mediator.Send(command);
            return RedirectToAction("GuideMediatR", "Admin");
        }

güncellemisini yapıp index ekledik ve form yapısı kurduk test edip dersi bitirdik.

# 76 Ders (Unit Of Work İmplementasyonu) 
İlk olarak entity kaymanına yen bir class Account ekliyoruz ve ardından DataAccessLayer'a IAccountDal +IGenericUomDal interfacelerini ekliyoruz. Devamında Repository klasörüne GenericUowRepository classını ekliyoruz.
Devamında DataAccessLayer içine new folder UnitOfWork ne içine IUowDal interface i ve UowDal classını ekleyip ardıdan EntityFramework içine EfAccountDal classını ekledik.
Bu işlemlerden sonra BusinessLayer'a geçiyoruz ve Abstract klasörü içine new folder AbstractUow ve içine IAccountService + IGenericUowService interfacelerini ardından Concrete içine ConcreteUow klasörünü ve içine de AccountManager classını ekliyoruz. Bu işlemlerin ardından Container içinde çağırma işlemi yapıyoruz.(Burası önemli).
Bu işlemden sonra admin areasında yeni bir controller AccountController açıyoruz ve ardından AccountViewModel'i ekliyoruz. ID'ye göre getirme işlemi olmadığı için onları tüm katmanlara ekleyip bu getirme işlemini kullandık. Devamında index ekleyip form yapısını oluşturduk ve işlemin başarılı bir şekilde gerçekleştiğini gördük.

# 77 Ders (Tasarımsal Düzenlemeler - 1)
Bu derste işlem yapılan sayfalar

-> DefaultController (Slider için)
-> _PopularDestinationsPartial (Resmi eksik olan turlar için)
-> _FeaturePartial (Öne çıkan turlar)
-> Yorumlar gelmiyordu js eksik olduğu için düzeltildi.
-> _FooterPartial
-> _NavbarPartial

# 78 Ders (Tasarımsal Düzenlemeler - 2)
-> DestinationController ve Index'i
-> _NavbarPartial link verme
-> DestinationDetails

# 79 Ders (Tasarımsal Düzenlemeler - 3)
-> Comment - AppUser ilişkilendirildi. (Buna bağlı olarak DAL ve BusinessLayer, ViewComponent _CommentListPartial ardından bu Componente ait Default)
-> AddComment

# 80 Ders (Tasarımsal Düzenlemeler - 4)
-> DestinationController
-> CommentController
-> AddComment
-> Destination - Guide ilişkilendirildi. (Dolayısıyla Business ve DAL'da)
-> Destination'a Date eklendi.

# 81 Ders (Tasarımsal Düzenlemeler - 5)
-> Gelmeyen yorum kısmını byrda düzelttik. Destinationda DAL be Business'ta List tipini sildik çünkü tek değer geri dönücek.
-> Guide Description2 eklendi.
-> GuideDetails DescriptionDeatils'e dahil edildi.
-> Guide tablosunu düzenledik.
-> GuideController açtık. Rehberlerimiz kısmını yapacağız.
-> Guide entitysine GuideListImage ekledik ama ben kullanmadım.
-> navbar'a link verildi.
-> ContactController açtık ve indexi'ini yapacağız.  

# 82 Ders (Contact Us Sayfası)
-> Index ekleyip templateden istediğimiz kısmı kopyalıyoruz. Validation eklemek için önce DTOs - ContactDTOs içine SendMessageDto classını açıyoruz ve Business içine ValidationRule içine ContactUs içine SendContactUsValidator açıp dolduruyoruz. Ardında Mapping içine

CreateMap<SendMessageDto, ContactUs>().ReverseMap();

kodunu ekliyoruz. Bu işlemin ardından ContactUsController'ı düzenleyip Index'ini düzeltiyoruz. Navbarda link verdik ve dersi bitirdik.

# 83 Ders (Projeye PostgreSQL Veri Tabanı Eklenmesi)
Projeye new Asp.Net Web Api Projesi ekliyoruz (SignalRApi). (Confugure https kısmını seçili değil yapıyoruz.) Bu projesi ekledikten sonra içine Dall klasörünü içinede Visitor classını ekledik.

Ardından şu paketleri SignalRApi katmanına ekliyoruz.

-> Microsoft.EntityFrameworkCore (5.0.17)
-> Microsoft.EntityFrameworkCore.Design (5.0.17)
-> Microsoft.EntityFrameworkCore.SqlServer (5.0.17)
-> Microsoft.EntityFrameworkCore.Tools (5.0.17)
-> Npgsql (5.0.16)
-> Npgsql.EntityFrameworkCore.PostgreSQL (5.0.10)
-> Swashbuckle.AspNetCore (5.6.3) (Bu paket kendi geldi.)

ekledikte sonra bu katmandaki appsettings.json içine

"ConnectionStrings": {
    "DefaultConnection": "Server=localhost;Port=5432;Database=MyVisitDb;User Id=postgres;Password=root"
  }

kodunu yazdık PostreSQL'e bağlanma için. Ardından DAL klasörü içine Context sınıfını oluşturduk ve startupta'da

services.AddEntityFrameworkNpgsql().AddDbContext<Context>(opt => opt.UseNpgsql(Configuration.GetConnectionString("DefaultConnection")));

satırını yazdık.

BU GÜNÜ ASLA UNUTMA....

Devamında migration yaptık. Daha sonra PostgreSQL'de bir kaç veri girişi yaptık.

# 84 Ders (Api Üzerinden Ziyaretçi Veri Seti Oluşturma) (Tekrar izlenecek)
İlk olarak Model klasörü oluşturuğ içine VisitorChart ve VisitorService classlarını ekliyoruz. Ardında Hubs klasörünü oluşturup içine VisitorHub classını ekliyoruz.
Devamında VisitorController api controller ekliyoruz.
 
Bu işlemlerden sonra PostManı indirip http://localhost:5000/api/Visitor yazıp Send dedik ve 404 döndü ama bir sonraki ders eksikleri kapatacağız.

# 85 Ders (CrossTab ile Ziyaretçiler İçin Pivot Tablo)
Bu derste ilk olarak CrossTab'ı öğrenebilmek için 

 create Table ProductSales
  (    Productname varchar(50),
      Year int,
      Sales int
  );
  Insert into ProductSales values
      ('A',2017,100),
      ('A',2018,150),
      ('A',2019,300),
      ('A',2020,500),
      ('A',2021,450),
      ('A',2022,675),
      ('B',2017,0),
      ('B',2018,900),
      ('B',2019,1120),
      ('B',2020,750),
      ('B',2021,1500),
      ('B',2022,1980);
      
    Select * from ProductSales;

    create extension tablefunc;

Select * from
  crosstab('select Productname,year,sales from ProductSales order by 1,2')
  as ProductSales(Productname varchar(50),year1 int,y2 int, y3 int,y4 int,y5 int,y6 int);

  sorgusu ile ürün ve yıla göre tablomuzu oluşturduk. Aynı tabloyu kendi tablomuza uydurabilmek için bizim tablomuza ait sorguyu yazdık saniye değerinden dolayı ilk olarak gelmedi ama düzeltince geldi.

# 86 Ders (SignalR Bağlantı Yapılandırması)
Bu derste Visitors tablosuna pgadminden sağ tık properties diyoruz ve column'dan VisitDate sütununu date yaptık.

Bu sorgu ile istediğimiz gibi geliyor bu tablo

Select * From crosstab
(
'Select "VisitDate","City","CityVisitCount"
	From "Visitors"
	order by 1,2'
) as ct("VisitDate" Date,City1 int, City2 int, City3 int, City4 int, City5 int);

Ardından projeye yeni bir SignalRConsume Asp.Net Web App projesi ekleyip Configure Http yi seçili değil yapıyoruz.

Ardında SignalRApi katmanındaki startup'a

services.AddCors(options => options.AddPolicy("CorsPolicy",
                builder =>
                {
                    builder.AllowAnyHeader()
                           .AllowAnyHeader()
                           .SetIsOriginAllowed((host) => true)
                           .AllowCredentials();
                }));

kodlarını ekledik ve ardından 

app.UseCors("CorsPolicy");

endpoints.MapHub<VisitorHub>("/VisitorHub"); 

kodunu ekledik.

Daha sonra SignalRConsume katmanına sağ tıklayıp add diyip Client-Side-Librery dedik ve gelen pencerede unpg seçip @microsoft/signalr@5.0.17 yazıp Choose diyip signalr.js ve signalr.min.js dosyalarını seçip Install diyoruz. Bu işlemden sonra SignalRConsume katmanındaki Homedaki indexte

@section Scripts
    {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>

    <script type="text/javascript">
        $(document).ready(() => {
            var connection = new signalR.HubConnectionBuilder().withUrl("http://localhost:5000/VisitorHub").build();

            $("#connectionStatus").text(connection.connectionState);

            connection.start().then(() => {
                $("#connectionStatus").text(connection.connectionState);
            }).catch((err) => { console.log(err) });
        })
    </script>
}

<div class="container">
    <br />
    <div class="alert alert-warning">
        Bağlantınızın durumu : <b id="connectionStatus"></b>
    </div>
</div>

kodlarını yazıp önce Startup projede SignalRApi yi seçip CTRL+F5 ardında SignalRConsume'yi seçip CTRL+F5 yapıyoruz ve connected yazısını görüp dersi bitirdik.

// Allahu Ekberrrrrr :D