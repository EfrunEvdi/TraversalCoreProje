# 2 Ders
N Katmanlı Mimari (N Tİer Arc.)
--------------------------------
Entity Layer: 
* Bu katmanda Entityler tanımlanacak. 
* SQL de Table olarak tutulan datalar C# ta Class olarak, SQL de Column olarak tutalan datalar da C# ta prooerty olarak tutulacak.
--> Code First: Tamamen kod öncelikli ilerlemek.
--------------------------------
Data Access Layer:
* Bu katmanda veri tabanı crud işlemleri için CRUD işlemleri alt yapısı oluşturulacak. Repository Desing Pattern kullanacağız.
* CREAT-READ-UPDATE-DELETE
--------------------------------
Business Layer:
* Validasyonların kontrolü 
--> Lokasyon max 50 karakter olmalı
--> Fiyat mutlaka sayısal veri olmalı vb.
--------------------------------
Presentation Layer:
* Sunum katmanı Controller tarafındaki backend kodları ve projenin Uİ kısmı bu katmanda yer alır.

# 3 Ders
- Solition üstüne sağ tık add new project diyoruz ve 3 katmanı ekliyoruz.
* Concrete: Somut ifadelerin tutulduğu klasör.
* Abstarct: Soyut ifadelerin tutulduğu klasör.

- EntityLayer: 
Class -> Table
Property -> Column
*Lokasyon, Hakkımızda, Müşteriler, Admin gibi

EntityLayer içine new folder Concrete ekliyoruz.
Conctere içine new class Destination + About

# 4 Ders
EntityLayer içine Conctere içine new class Feature + Feature2 + SubAbout + Testimonial + Newsletter

# 5 Ders
EntityLayer içine Conctere içine new class About2 + Guide + Contact

# 6 Ders
Bütün katmanlara aşağıdaki paketleri yüklüyoruz.
Microsoft.EntityFrameworkCore (5.0.12)
Microsoft.EntityFrameworkCore.Desing (5.0.12)
Microsoft.EntityFrameworkCore.SqlServer (5.0.12)
Microsoft.EntityFrameworkCore.Tools (5.0.12)

# 7 Ders
DataAccessLayer içine new folder
* Abstract

* Concrete
  + Context

* EntityFramework

* Repository

EntityLayer - DataAccessLayer - BusinessLayer - PresentationLayer

Bu sıralama önemli 
Entity -> Hepsine 
DataAccess -> Busines + Presentation
Business -> Presentation
referans olarak verilir.( Bu işlem add Project Reference olarak yapılır.)

Context doldurulduktan sonra EntityLayerdaki classlara [Key] attribute u koyuldu.

# 8 Ders
İlk migration umuzu yapıyoruz.

# 9 Ders
DataAccessLayer içine Abstract içine new interface IGuideDal + IDestinationDal
DRY yapmıyoruz. Bu yüzden generic yapı kullanacağız.
IGenericDal interfacesini açıp diğer interfacelere kalıtım yoluyla miras veriyoruz.

# 10 Ders
DataAccessLayer içine Abstract içine new interface IAboutDal + IAbout2Dal + IContactDal + IFeatureDal + IFeature2Dal + INewsletterDal + SubAboutDal + ITestimonialDal ve miras verme işlemini yapıyoruz.
Daha sonra DataAccessLayer içindeki Repository içine new class GenericRepository deyip imğlement interface diiyor ve içlerini dolduruyoruz.

# 11 Ders
DataAccessLayer içine içine EntityFramework içine new class EfAboutDal + EfAbout2Dal + EfContactDal + EfDestinationDal + EfFeatureDal + EfFeature2Dal + EfGuideDal + EfNewsletterDal + EfSubAboutDal + EfTestimonialDal

# 12 Ders
BusinessLayer içine new folder Abstract + Concrete + ValidationRule
Abstract içine new interface IGenericService + IAboutService + IAbout2Service + IContactService + IDestinationService + IFeatureService + IFeature2Service + IGuideService + INewsletterService + ISubAboutService + ITestimonialService
Concrete içine new class  AboutManager ( implement interface ediyoruz.) İçini dolduruyoruz diğerlerini zamanı gelince oluşturacağız.

# 13 Ders
BusinessLayer ve Presentation içine aşağıdaki paketleri yüklüyoruz.
FluentValidation (10.3.6)
FluentValidation.AspNetCore (10.3.6)

BusinessLayer içine ValidationRules içine new class AboutValidator

UI katmanına new controller DefaultController + shared içide _UILayout ekliyoruz. DefaultController dan Index açıyoruz.

# 14 Ders
UILayout'ta template'daki indexi kopyalayıp layout kısmını aldık geri kalanı Default index in içine attık. Uzantıları düzelttik @RenderBody() kodunu indexin gelmesini istediğimiz yere koyduk.
Layout u tamamladıktan sonra Partiallamak için Views içine new folder LayoutPartial içine new view razor view partial seçilecek _HeaderPartial.
@await Html.PartialAsync("/Views/LayoutPartial/HeaderPartial.cshtml") kodu ile partial kısmı çalışacak.
Bu işlemi _NavbarPartial.cshtml ve _FooterPartial.cshtml içinde yapıyoruz.

# 15 Ders
Partiallayama _ScriptPartial.cshtml için ed yapıyoruz.
Daha sonrasında Partialları türkçeleştirdik.
Default/Index'teki alanları ViewComponent yapmaya karar verdik.
UI katmanı içine new folder ViewComponents açıyoruz.
Bu klasör içine new folder Default içine new class _SliderPartial.cs açıyoruz.

---------------------------------------------------------
- Partial View’de bir veri bize döndürücekse bunu mutlaka Contollerden alması gerekmektedir.
- Her bir View’in Partiala Controller üzerinden veri göndermek hem Controller maliyetini attırııcaktır hem de Controllera amacını saptıracaktır.
- PartialView yapılanması ihtiyacı olan dataları Controller üzerinden elde edeceği için Controller’daki maliyeti artırmakta ve SOLID prensiplerine aykırı davranılmasına sebebiyet verebilmektedir.
- PartiView yapısal olarak controller üzerinden beslenmektedir.
- *ViewCompenent* ihtiyacı olan dataları controller üzerinden değil direkt kendi cs.dosyasında elde edebilmektedir.Böylece controllerdaki luzumsuz maliyeti ortadan kaldırmış olmaktayız.
---------------------------------------------------------

Daha sonra Shared içine new folder _SliderPartial bu klasörün içine de Default.cshtml ekliyoruz. Default a istediğimiz yeri yapıştırdıktan sonra @await Component.InvokeAsync("_SliderPartial") ile bu Componenti çağırıyoruz. Sonrasında sayfayı türkçeleştiriyoruz.

# 16 Ders
Bir önceki Component işlemini _PopularDestinationsPartial içinde yapıyoruz.
BusinessLayer içine DestinationManager classını açıyoruz. Sadece GetList kısmını doldurup _PopularDestinationsPartial da 
 DestinationManager destinationManager = new DestinationManager(new EfDestinationDal()); ile yeni bir nesne türetiyoruz.public kısmının içine de var values = destinationManager.TGetList(); ile listeleme işlemini gerçekleştiriyoruz (return View(values);).
 Sonrada PopularDestination un Default unu foreach'a soktuk.

# 17 Ders
Bu derste diğer bir Component olan _StatisticsPartial ı yapıyoruz. Bu sayfayı türkçeleştirip ViewBag lerle istatistikleri getiriyoruz.
Feature Componenti açıyoruz ama bu componentte listeleme yapacağımız için BusinessLayer içindeki concrete içine new class ekliyoruz FeatureManager GetList kısmını doldurduktan sonra Component işlemlerini tamamlıyoruz.

# 18 Ders
Bu Feature kısmının verilerini getirmek için if kullandım.
Daha sonrasında SubAbout için aynı Component işlemlerini tekrarladık.
Testimonial kısmınıda bu şekilde oluşturuyoruz.

# 19 Ders
Testimonial i türkçeleştirip foreach e soktuk. Daha sonrasında footer ıda türkçeleştirdik.

# 20 Ders
Template in tam halini indirdik.
DestinationController açtık. Index ekledik(Razor view + Loyout).
services.html sayfasından yararlanarak Destination/Index i doldurup, türkçeleştirip, foreach a sokuyoruz.

# 21 Ders
DestinationDetails için DestinationControllerda  HttpGet ve HttpPost controller satırları oluşturduk. Template de ilgi sayfayı bu details sayfasına ekledik. Düzgün çalışmadığı için layout katmanında köklü bir değişiklik yaptık.

# 22 Ders
* Anasayfa slider fotorafları gelmiyor.
Bu derste DestinationDetails sayfası için 2 tablo olmaması adına Destination Entitysine eklemeler yaptık. Daha sonra GetByID kısmı yoktu bizde DataAccessLayerda onu yazdık ve DestinationManager da içini doldurduk. Controller tarafındada HttpGette bu id yi getirme kodunu kullandık. Devamında @Model.Details1 istediğimiz satırı çağırdık. DestinationDetailste sadeleştirmeler yaptık.

# 23 Ders
Bu derste DestinationDetails kısmındaki yorum kısmı için yeni bir tablo oluşturduk ve bu tabloyu Destination tablosuna bağladık.Migration yaptık.
_CommentListPartial için bir component yapıyoruz.
_AddCommentPartial İçin de component işlemini yapıyoruz.

# 24 Ders
Yorumları listeleyebilmek için IGenericDal'a List<T> GetListByFilter(Expression<Func<T,bool>> filter); yazdık. Bu işlemi yaptıktan sonra GenericReposityor'de

 public List<T> GetListByFilter(Expression<Func<T, bool>> filter)
        {
            using var c = new Context();
            return c.Set<T>().Where(filter).ToList();
        }

ile implemen interface ediyoruz.
ICommentDal ve EfCommentDal'ı ekledik. Ardından ICommentService ve CommentManager ı ekliyoruz. Daha sonra CommentManager da

 public List<Comment> TGetDestinationByID(int id)
        {
            return _commentDal.GetListByFilter(x => x.DestinationID == id);
        }

ve ICommentService'e

        List<Comment> TGetDestinationByID(int id);

kodu ile id ye göre getirme işlemini yapıyoruz.

id ile işlem yapacağımız için @await Component.InvokeAsync("_CommentListPartial",new { id = ViewBag.DestinationID }) ile id yi alıyoruz.

# 25 Ders
Yorum yap alanını türkçeleştirdik.
Bu alanı componentte yapmaya çalıştık fakat olmadı bu yüzden CommentController açtık partialview olarak yapacağız.
Controllerda HttpGet ve Post işlemlerini tamamladıktan sonra açtığımız AddComment view inde sayfa düzgün bir şekilde geldi fakat yorum yaptırmadı bu işlemi Ajaxla yapmaya karar verdik. 26 derste...

