# 2 Ders
N Katmanlı Mimari (N Tİer Arc.)
--------------------------------
Entity Layer: 
* Bu katmanda Entityler tanımlanacak. 
* SQL de Table olarak tutulan datalar C# ta Class olarak, SQL de Column olarak tutalan datalar da C# ta prooerty olarak tutulacak.
--> Code First: Tamamen kod öncelikli ilerlemek.
--------------------------------
Data Access Layer:
* Bu katmanda veri tabanı crud işlemleri için CRUD işlemleri alt yapısı oluşturulacak. Repository Desing Pattern kullanacağız.
* CREAT-READ-UPDATE-DELETE
--------------------------------
Business Layer:
* Validasyonların kontrolü 
--> Lokasyon max 50 karakter olmalı
--> Fiyat mutlaka sayısal veri olmalı vb.
--------------------------------
Presentation Layer:
* Sunum katmanı Controller tarafındaki backend kodları ve projenin Uİ kısmı bu katmanda yer alır.

# 3 Ders
- Solition üstüne sağ tık add new project diyoruz ve 3 katmanı ekliyoruz.
* Concrete: Somut ifadelerin tutulduğu klasör.
* Abstarct: Soyut ifadelerin tutulduğu klasör.

- EntityLayer: 
Class -> Table
Property -> Column
*Lokasyon, Hakkımızda, Müşteriler, Admin gibi

EntityLayer içine new folder Concrete ekliyoruz.
Conctere içine new class Destination + About

# 4 Ders
EntityLayer içine Conctere içine new class Feature + Feature2 + SubAbout + Testimonial + Newsletter

# 5 Ders
EntityLayer içine Conctere içine new class About2 + Guide + Contact

# 6 Ders
Bütün katmanlara aşağıdaki paketleri yüklüyoruz.
Microsoft.EntityFrameworkCore (5.0.12)
Microsoft.EntityFrameworkCore.Desing (5.0.12)
Microsoft.EntityFrameworkCore.SqlServer (5.0.12)
Microsoft.EntityFrameworkCore.Tools (5.0.12)

# 7 Ders
DataAccessLayer içine new folder
* Abstract

* Concrete
  + Context

* EntityFramework

* Repository

EntityLayer - DataAccessLayer - BusinessLayer - PresentationLayer

Bu sıralama önemli 
Entity -> Hepsine 
DataAccess -> Busines + Presentation
Business -> Presentation
referans olarak verilir.( Bu işlem add Project Reference olarak yapılır.)

Context doldurulduktan sonra EntityLayerdaki classlara [Key] attribute u koyuldu.

# 8 Ders
İlk migration umuzu yapıyoruz.

# 9 Ders
DataAccessLayer içine Abstract içine new interface IGuideDal + IDestinationDal
DRY yapmıyoruz. Bu yüzden generic yapı kullanacağız.
IGenericDal interfacesini açıp diğer interfacelere kalıtım yoluyla miras veriyoruz.

# 10 Ders
DataAccessLayer içine Abstract içine new interface IAboutDal + IAbout2Dal + IContactDal + IFeatureDal + IFeature2Dal + INewsletterDal + SubAboutDal + ITestimonialDal ve miras verme işlemini yapıyoruz.
Daha sonra DataAccessLayer içindeki Repository içine new class GenericRepository deyip imğlement interface diiyor ve içlerini dolduruyoruz.

# 11 Ders
DataAccessLayer içine içine EntityFramework içine new class EfAboutDal + EfAbout2Dal + EfContactDal + EfDestinationDal + EfFeatureDal + EfFeature2Dal + EfGuideDal + EfNewsletterDal + EfSubAboutDal + EfTestimonialDal

# 12 Ders
BusinessLayer içine new folder Abstract + Concrete + ValidationRule
Abstract içine new interface IGenericService + IAboutService + IAbout2Service + IContactService + IDestinationService + IFeatureService + IFeature2Service + IGuideService + INewsletterService + ISubAboutService + ITestimonialService
Concrete içine new class  AboutManager ( implement interface ediyoruz.) İçini dolduruyoruz diğerlerini zamanı gelince oluşturacağız.

# 13 Ders
BusinessLayer ve Presentation içine aşağıdaki paketleri yüklüyoruz.
FluentValidation (10.3.6)
FluentValidation.AspNetCore (10.3.6)

BusinessLayer içine ValidationRules içine new class AboutValidator

UI katmanına new controller DefaultController + shared içide _UILayout ekliyoruz. DefaultController dan Index açıyoruz.

# 14 Ders
UILayout'ta template'daki indexi kopyalayıp layout kısmını aldık geri kalanı Default index in içine attık. Uzantıları düzelttik @RenderBody() kodunu indexin gelmesini istediğimiz yere koyduk.
Layout u tamamladıktan sonra Partiallamak için Views içine new folder LayoutPartial içine new view razor view partial seçilecek _HeaderPartial.
@await Html.PartialAsync("/Views/LayoutPartial/HeaderPartial.cshtml") kodu ile partial kısmı çalışacak.
Bu işlemi _NavbarPartial.cshtml ve _FooterPartial.cshtml içinde yapıyoruz.

# 15 Ders
Partiallayama _ScriptPartial.cshtml için ed yapıyoruz.
Daha sonrasında Partialları türkçeleştirdik.
Default/Index'teki alanları ViewComponent yapmaya karar verdik.
UI katmanı içine new folder ViewComponents açıyoruz.
Bu klasör içine new folder Default içine new class _SliderPartial.cs açıyoruz.

---------------------------------------------------------
- Partial View’de bir veri bize döndürücekse bunu mutlaka Contollerden alması gerekmektedir.
- Her bir View’in Partiala Controller üzerinden veri göndermek hem Controller maliyetini attırııcaktır hem de Controllera amacını saptıracaktır.
- PartialView yapılanması ihtiyacı olan dataları Controller üzerinden elde edeceği için Controller’daki maliyeti artırmakta ve SOLID prensiplerine aykırı davranılmasına sebebiyet verebilmektedir.
- PartiView yapısal olarak controller üzerinden beslenmektedir.
- *ViewCompenent* ihtiyacı olan dataları controller üzerinden değil direkt kendi cs.dosyasında elde edebilmektedir.Böylece controllerdaki luzumsuz maliyeti ortadan kaldırmış olmaktayız.
---------------------------------------------------------

Daha sonra Shared içine new folder _SliderPartial bu klasörün içine de Default.cshtml ekliyoruz. Default a istediğimiz yeri yapıştırdıktan sonra @await Component.InvokeAsync("_SliderPartial") ile bu Componenti çağırıyoruz. Sonrasında sayfayı türkçeleştiriyoruz.

# 16 Ders
Bir önceki Component işlemini _PopularDestinationsPartial içinde yapıyoruz.
BusinessLayer içine DestinationManager classını açıyoruz. Sadece GetList kısmını doldurup _PopularDestinationsPartial da 
 DestinationManager destinationManager = new DestinationManager(new EfDestinationDal()); ile yeni bir nesne türetiyoruz.public kısmının içine de var values = destinationManager.TGetList(); ile listeleme işlemini gerçekleştiriyoruz (return View(values);).
 Sonrada PopularDestination un Default unu foreach'a soktuk.

# 17 Ders
Bu derste diğer bir Component olan _StatisticsPartial ı yapıyoruz. Bu sayfayı türkçeleştirip ViewBag lerle istatistikleri getiriyoruz.
Feature Componenti açıyoruz ama bu componentte listeleme yapacağımız için BusinessLayer içindeki concrete içine new class ekliyoruz FeatureManager GetList kısmını doldurduktan sonra Component işlemlerini tamamlıyoruz.

# 18 Ders
Bu Feature kısmının verilerini getirmek için if kullandım.
Daha sonrasında SubAbout için aynı Component işlemlerini tekrarladık.
Testimonial kısmınıda bu şekilde oluşturuyoruz.

# 19 Ders
Testimonial i türkçeleştirip foreach e soktuk. Daha sonrasında footer ıda türkçeleştirdik.

# 20 Ders
Template in tam halini indirdik.
DestinationController açtık. Index ekledik(Razor view + Loyout).
services.html sayfasından yararlanarak Destination/Index i doldurup, türkçeleştirip, foreach a sokuyoruz.

# 21 Ders
DestinationDetails için DestinationControllerda  HttpGet ve HttpPost controller satırları oluşturduk. Template de ilgi sayfayı bu details sayfasına ekledik. Düzgün çalışmadığı için layout katmanında köklü bir değişiklik yaptık.

# 22 Ders
* Anasayfa slider fotorafları gelmiyor.
Bu derste DestinationDetails sayfası için 2 tablo olmaması adına Destination Entitysine eklemeler yaptık. Daha sonra GetByID kısmı yoktu bizde DataAccessLayerda onu yazdık ve DestinationManager da içini doldurduk. Controller tarafındada HttpGette bu id yi getirme kodunu kullandık. Devamında @Model.Details1 istediğimiz satırı çağırdık. DestinationDetailste sadeleştirmeler yaptık.

# 23 Ders
Bu derste DestinationDetails kısmındaki yorum kısmı için yeni bir tablo oluşturduk ve bu tabloyu Destination tablosuna bağladık.Migration yaptık.
_CommentListPartial için bir component yapıyoruz.
_AddCommentPartial İçin de component işlemini yapıyoruz.

# 24 Ders
Yorumları listeleyebilmek için IGenericDal'a List<T> GetListByFilter(Expression<Func<T,bool>> filter); yazdık. Bu işlemi yaptıktan sonra GenericReposityor'de

 public List<T> GetListByFilter(Expression<Func<T, bool>> filter)
        {
            using var c = new Context();
            return c.Set<T>().Where(filter).ToList();
        }

ile implemen interface ediyoruz.
ICommentDal ve EfCommentDal'ı ekledik. Ardından ICommentService ve CommentManager ı ekliyoruz. Daha sonra CommentManager da

 public List<Comment> TGetDestinationByID(int id)
        {
            return _commentDal.GetListByFilter(x => x.DestinationID == id);
        }

ve ICommentService'e

        List<Comment> TGetDestinationByID(int id);

kodu ile id ye göre getirme işlemini yapıyoruz.

id ile işlem yapacağımız için @await Component.InvokeAsync("_CommentListPartial",new { id = ViewBag.DestinationID }) ile id yi alıyoruz.

# 25 Ders
Yorum yap alanını türkçeleştirdik.
Bu alanı componentte yapmaya çalıştık fakat olmadı bu yüzden CommentController açtık partialview olarak yapacağız.
Controllerda HttpGet ve Post işlemlerini tamamladıktan sonra açtığımız AddComment view inde sayfa düzgün bir şekilde geldi fakat yorum yaptırmadı bu işlemi Ajaxla yapmaya karar verdik. 26 derste...

# 26 Ders
Bu ders çok önemli Ajax işleminden vazgeçtik. CommentController tarafında aynı methodu hem bir partial view hemde Iactionresult olarak tanımladık.

[HttpGet]
public PartialViewResult AddComment()
  {
       return PartialView();
  }
[HttpPost]
public IActionResult AddComment(Comment comment)
  {
       comment.CommentDate = Convert.ToDateTime(DateTime.Now.ToShortDateString());
       comment.CommentStatus = true;
       comment.DestinationID = 3;
       commentManager.TAdd(comment);
       return RedirectToAction("Index", "Destination");
  }
bu kalıp çok önemli.

Bu dersin devamında comment.DestinationID = 3; ile hangi sayfaya yorum yaparsak yapalım id=3 olanrotaya yorum yapar bunu dzeltmek adına şu işlemleri yapıyoruz.

Öncelikle DestinationDetails'de ;

@await Html.PartialAsync("~/Views/Comment/AddComment.cshtml",new { id = ViewBag.DestinationID }) olarak güncelledim.

CommentController'ın HttpPost kısmını ;

[HttpPost]
        public IActionResult AddComment(Comment comment)
        {
            comment.CommentDate = Convert.ToDateTime(DateTime.Now.ToShortDateString());
            comment.CommentStatus = true;

            commentManager.TAdd(comment);
            return RedirectToAction("DestinationDetails", "Destination", new { id = comment.DestinationID });
        } 
olarak yazdım son kod bizi ilgili detay sayfasına atayacak.

AddComment kısmında da ;

<div class="form-group col-lg-6">
            <input type="hidden" name="DestinationID" class="form-control" value="@ViewBag.DestinationID" required="" />
</div> 
olarak id yi kayıt ettirdim.

# 27 Ders
Bu derste identity paketlerini yüklüyoruz.
BusinessLayer hariç tüm katmanlara yüklediğimiz paketler;
- Microsoft.AspNetCore.Identity (2.2.0)
- Microsoft.AspNetCore.Identity.EntityFrameworkCore (5.0.12)

Daha sonra EntityLayer a AppUser ve AppRole classı açıyoruz. Bu işlemleri yaptıktan sonra public class Context : IdentityDbContext<AppUser, AppRole, int> olarak Context'i güncelliyoruz. Daha sonra migration yapıyoruz.

# 28 Ders
Giriş ve kullanıcı templatelerini yükledikten sonra LoginController açıyoruz.
Daha sonra SingUp ve SingIn controllerlarını tanımladıktan sonra SingUp için bire view ekliyoruz. ( Partial değil Layoutsuz.) SingIn içinde aynı işlemi yapıyoruz.
İndirdiğimiz templatelari bu view dosyalarına koyup türkçeleştiriyoruz.

# 29 Ders
startup.cs te 28. satıra services.AddDbContext<Context>(); yazdık.
29. satıra services.AddIdentity<AppUser,AppRole>().AddEntityFrameworkStores<Context>(); yazdık.
34-38 arası services.AddMvc(config =>
            {
                var policy = new AuthorizationPolicyBuilder().RequireAuthenticatedUser().Build();
                config.Filters.Add(new AuthorizeFilter(policy));
            }); yazdık.
40. satıra services.AddMvc(); yazdık.
58. satıra  app.UseAuthentication(); yazdık.

Bu bölümde slider kısmı düzeltildi.

Sonrasında LoginController'a
private readonly UserManager<AppUser> _userManager;

        public LoginController(UserManager<AppUser> userManager)
        {
            _userManager = userManager;
        }
        yazdık.
HttpPost kısmını şu şekilde güncelledik.
[HttpPost]
        public async Task<IActionResult> SingUp(UserRegisterViewModel p)
        {
            return View();
        }
Daha sonrasında UserRegisterViewModel modelini oluşturduk.

Devamında modelden gelen değerlerle elimizdeki AppUser tablosunu eşleştirdik. Bunları yaptıktan sonra  kaydetme işlemi gerçekleşti.

# 30 Ders
SingUp templat i işimize yaramıyacağı için yeni bir template indirdik ve bunu tekrardan modelimize uydurduk, türkçeleştirdik.

# 31 Ders
<div class="text-danger" asp-validation-summary="ModelOnly">
                            
</div> 
kodu ile şifredeki kuralları görebiliyoruz. Ama ingilizce olarak geliyor. Bu yapıyı türkçeleştirmemiz lazım. Türkçeleştirmek için Bir model ekliyoruzz bu model önemli CustomIdentityValidator.
daha sonrasında bu modelin çalışabilmesi için startup'ın 32. satırını
services.AddIdentity<AppUser, AppRole>().AddEntityFrameworkStores<Context>().AddErrorDescriber<CustomIdentityValidator>().AddEntityFrameworkStores<Context>();

# 32 Ders
Dashbord template si indirdik. Kullanıcı için bir layout oluşturup adını _UserLayout koyduk. Areas adında yeni bir klasör oluşturduk. Sağ tık add area diyip mvc area seçip adını Member koyduk. Bu işlemle birlikte gelen Scaffolding sayfasındaki

app.UseEndpoints(endpoints =>
        {
          endpoints.MapControllerRoute(
            name : "areas",
            pattern : "{area:exists}/{controller=Home}/{action=Index}/{id?}"
          );
        });

kodunu startupda 82. satıra yapıştırdık.
Daha sonra açtığımız bu Areanın içindeki Controller klasörüne 3 tane controller ekledik.
-> CommentController
-> MessageController
-> ProfileController
   
*** Areadaki controller in çalışması için [Area("Member")] yazmalıyız. ***
[AllowAnonymous] de yazıyoruz ki giriş istemesin.
_UserLayoutu düzenledik ve partiallara ayırmaya başladık.
Bu Partialları oluşturmak için MemberLayouPartial adlı klasörün içine açıyoruz.
-> _HeaderPartial
-> _NavbarPartial

# 33 Ders
-> _Navbar2Partial
-> _RightbarPartial
-> _FooterPartial
-> _ScriptPartial partial larınıda oluşturduk.

Daha sonrasında DestinationController ekliyoruz Member daki controller'a. Açtığımız bu controller için index açtık layoutu _UserLayout.
Bu indexi aktif tur rotalarımız olarak kullandık. Dashboard tan gelen tabloyu kullandım ben.

# 34 Ders
        private readonly SignInManager<AppUser> _singInManager;
Login işlemi için LoginController'a 
private readonly SignInManager<AppUser> _singInManager; 
kodunu ekledik.
Altındaki Constructor metodunu da 

public LoginController(UserManager<AppUser> userManager, SignInManager<AppUser> singInManager)
        {
            _userManager = userManager;
            _singInManager = singInManager;
        }

şeklinde güncelliyoruz.
Sonrasında UserSingInViewModel i oluşturuyoruz.
Devamında LoginController'da SinIn kısmının post kısmını yazıyoruz.

Daha sonra SingIn de @model TraversalCoreProje.Models.UserSingInViewModel kodu ile form içini düzenliyoruz.
Sisteme otantike olmuş olduk.

# 35 Ders
Bu bölümde prfil düzenleme kısmını yapacağız öncelikle area içindeki ProfileController dan index açıyorum, devamında area içinde ki model klasörüne UserEditViewModel ini ekliyoruz. Açtığımız index sayfasında bir form kodu yazıyoruz bu kodları @model TraversalCoreProje.Areas.Member.Models.UserEditViewModel ile eşleştiriyoruz.
Bu işlemlerden sonra ProfileController ın son hali 

[Area("Member")]
[Route("Member/[controller]/[action]")]
    public class ProfileController : Controller
    {
        private readonly UserManager<AppUser> _userManager;

        public ProfileController(UserManager<AppUser> userManager)
        {
            _userManager = userManager;
        }
        [HttpGet]
        public async Task<IActionResult> Index()
        {
            var values = await _userManager.FindByNameAsync(User.Identity.Name);
            UserEditViewModel userEditViewModel = new UserEditViewModel();
            userEditViewModel.Name = values.Name;
            userEditViewModel.Surname = values.Surname;
            userEditViewModel.PhoneNumber = values.PhoneNumber;
            userEditViewModel.Mail = values.Email;
            return View(userEditViewModel);
        }

oluyor.

Çok Önemli
------------------------------------
[Route("Member/[controller]/[action]")] kodu ile login controllerdaki yönlendirme kodu olan return RedirectToAction("Index", "Profile", new { area = "Member" }); çalışır.

Bu yönlendirme sağlandıktan sonra Dashboard template'inden beğendiğim kısımla birlikte hocanın yaptığı form kısmını birleştirip güzel bir profil düzenleme kısmı yaptım.

# 36 Ders
Bu derste amacımız kullanıcan profil resmi almak. Bu işlem için sırayla şunları yapıyoruz ;

UserEditViewModel e 

public IFormFile Image { get; set; } 

kodunu ekiyoruz. Dosya alacağız çünkü kullanıcıdan.

Devamında Profile controller da 

[HttpPost]
        public async Task<IActionResult> Index(UserEditViewModel p)
        {
            var user = await _userManager.FindByNameAsync(User.Identity.Name);
            if (p.Image != null)
            {
                var resource = Directory.GetCurrentDirectory();
                var extension = Path.GetExtension(p.Image.FileName);
                var imagename = Guid.NewGuid() + extension;
                var savelocation = resource + "/wwwroot/userimages/" + imagename;
                var stream = new FileStream(savelocation, FileMode.Create);
                await p.Image.CopyToAsync(stream);
                user.ImageUrl = "/userimages/" + imagename;
            }
            user.Name = p.Name;
            user.Surname = p.Surname;
            user.PasswordHash = _userManager.PasswordHasher.HashPassword(user, p.Password);
            var result = await _userManager.UpdateAsync(user);
            if (result.Succeeded)
            {
                return RedirectToAction("SingIn", "Login");
            }
            return View();
        }

ekliyoruz.

Son olarak Profile/Indecte form kısmını <form method="post" enctype="multipart/form-data"> olarak güncelledik.

# 37 Ders
Bu derste rezervasyon kısmıyla ilgileneceğiz.
Bunun için EntityLayer da class oluşturuyoruz. Reservation classını context tede tanımlıyıp migration yapıyoruz. 
Devamında Memberde yeni bir controller açıyoruz. ReservationController. Bu controller ın içinde ;
MyCurrentReservation, MyOldReservation ve Getli Postlu NewRezervation controller larını oluşturuyoruz. Sonrasında NewRezervation için bir layoutlu View ekliyoruz.

# 38 Ders
Bu derste il olarak ReservationController'da
[HttpGet]
        public IActionResult NewRezervation()
        {
            List<SelectListItem> values = (from x in destinationManager.TGetList()
                                           select new SelectListItem
                                           {
                                               Text = x.City,
                                               Value = x.DestinationID.ToString()
                                           }).ToList();
            ViewBag.v = values;
            return View();
        }
[HttpGet] kısmını bu şekilde güncelledik. Daha sonra DataAccessLayer'da Abstract içine new interface IReservationDal, EntityFramework içine new class EfReservationDal'ı oluşturduk. BusinessLayer'da  Abstract içine new interface IReservationService, devamında Concrete içine new class ReservationManager ekliyoruz. İçinde sadece TAdd kısmını güncelledik.
Sonrasında ReservationController'a dönüp HttpPost kısmını ;
[HttpPost]
        public IActionResult NewRezervation(Reservation p)
        {
            p.AppUserID = 1;
            reservationManager.TAdd(p);
            return RedirectToAction("MyCurrentReservation");
        }
olarak güncelledik. Id yi daha sonra dinamik hale getircez.
NewReservation sayfasında form oluşturduk. Bu form ile yeni bir rezervasyon sqlde eklendi fakat gittiği sayfa olmadığı için hata verdi.

# 39 Ders
Bu derste ilk olarak ReservationController'da p.Status = "Onay bekliyor..."; olarak güncelledik.
MyCurrentReservation için bir index ekledik. MyOldReservation içinde bir index ekledik. Sonrasında sidebar a bu sayfaların linkini verdik.

# 40 Ders
ReservationController'a 
public IActionResult MyApprovalReservation()
        {
            return View();
        }
        ekliyoruz.
Bir Index ekliyoruz Onay bekleyen rezervasyonlar olarak başlık attık.
Sonrasında 

private readonly UserManager<AppUser> _userManager;

        public ReservationController(UserManager<AppUser> userManager)
        {
            _userManager = userManager;
        }
olarak controllera ekleme yaptık. 

MyApprovalReservation kısmını şu şekilde güncelledik.

public async Task<IActionResult> MyApprovalReservation()
       {
           var values = await _userManager.FindByNameAsync(User.Identity.Name);
           ViewBag.v = values.Id;
           return View();
       }

Devamında navbarda link verdik.
        
IReservationService'e List<Reservation> GetListApprovalReservation(int id); satırını ekledik.
ReservationManagerda implrmrnt ettikten sonra
public List<Reservation> GetListApprovalReservation(int id)
        {
            return _reservationDal.GetListByFilter(x => x.AppUserID == id);
        }
içini bu şekilde dolduruyoruz.
Bu işlemden sonra ReservationController da

public async Task<IActionResult> MyApprovalReservation()
        {
            var values = await _userManager.FindByNameAsync(User.Identity.Name);
            var valuesList = reservationManager.GetListApprovalReservation(values.Id);
            return View(valuesList);
        }

işlemini yapıyoruz.
Daha sonra bu controllerin indeksinde bir tablo oluşturduk.
Bu şekilde giriş yapmış kullanıcının tüm rezervasyon sitesi gelmiş oldu gelecek ders onu düzelticez.

# 41 Ders
Öncelikle onay bekleyen rezarvosyanların gelmesi için ReservationManager'da

public List<Reservation> GetListApprovalReservation(int id)
        {
            return _reservationDal.GetListByFilter(x => x.AppUserID == id && x.Status == "Onay bekliyor...");
        }

bu değişikliği yaptık.
Bu değişiklikten sonra Onay bekliyor olan tüm rezervasyonlar geldi bunda sıkıntı yok devamında bu gelen tabloda destination kısmında Id yerine isim gelmesini istediğimiz için ilişki kurmaya IReservationDal'da 
public interface IResevationDal : IGenericDal<Reservation>
    {
        List<Reservation> GetListWithReservationByWaitApproval(int id);
        List<Reservation> GetListWithReservationByAccepted(int id);
        List<Reservation> GetListWithReservationByPrevious(int id);
    }

değişikliğini yaptık bunda da sıkıntı yok.
Bu yaptığımız değişiklikten sonra EfReservatiınDal da bu değişikliklerim implemen edip içlerini dolduracakken reservation ve destination arasında bir ilişki kurmadığımızı farkettik bu sebeple;
1)EntityLayerdaki Reservation sınıfında public string Destination { get; set; } satırını yorum satır yapıp hata çıkarak yerleri yorum satıra aldık. ( Bu kısım kullanıldığı ve yok ettiğimiz için hata fırlattı.) Devamında migration yaptık.
2)İlişkiyi kurmak için destination'a 

public List<Reservation> Reservations { get; set; } 

ve reservation'a 

public int DestinationID { get; set; }
public Destination Destination { get; set; }

satırlarını ekleyip migration yaptık. FAKAT RESERVATİON SAYFASINA ZATEN APPUSER TABLOSU BAĞLI OLDUĞU İÇİN 2. TABLOYU BAĞLAYAMAZSIN DİYE HATA VERDİ.

# 42 Ders
Aldığımız hatayı düzeltmek için tabloyu sıfırlıyoruz.
truncate table Reservations kodunu sql'e yazıp update database dedik ve oldu. :)))

Sqlde tabloyu sıfırladığımız için 3 tane data girdik. (Reservation)
Daha sonra EfReservationDal'da 

public List<Reservation> GetListWithReservationByWaitApproval(int id)
        {
            using (var context = new Context())
            {
                return context.Reservations.Include(x => x.Destination).Where(x => x.Status == "Onay bekliyor..." && x.AppUserID == id).ToList();
            }
        }

IReservationService'de

 public interface IReservationService : IGenericService<Reservation>
    {
        List<Reservation> GetListWithReservationByWaitApproval(int id);
    }

ReservationManager'da

 public List<Reservation> GetListWithReservationByWaitApproval(int id)
        {
            return _reservationDal.GetListWithReservationByWaitApproval(id);
        }

güncellemelerini yapıyoruz.

Daha sonrasında ReservationController'da

 public async Task<IActionResult> MyApprovalReservation()
        {
            var values = await _userManager.FindByNameAsync(User.Identity.Name);
            var valuesList = reservationManager.GetListWithReservationByWaitApproval(values.Id);
            return View(valuesList);
        }

değişikliğini yapıp Viewinde <td>@item.Destination.City</td> yazdığımızda artık Destinationda ki city ismi geliyor..
Şimdi diğerleri içinde aynı şeyi yapacağız. Diğer kısımları da tamamladıktan sonra hepsi istediğimiz gibi geliyor. İf else kullanarak eğer herhangi bir veri yoksa bu durumu h4 etiketiyle yazdırdım.

# 43 Ders
Bu derste profil kısmını güncellemeye karar verdik. Bunun için DahsboardController açıyoruz. Dashboard template'inde profile.html sayfasını  kullandık ordan işimize yarayan kısmı aldık ve Controllerdan açtığımız indexe yapıştırıyoruz. Daha conra controllerda oluşturduğumuz Viewbagler ile istediğimiz bilgiyi çektik. Devamını 44. derste yapacağız.

# 44 Ders
Oluşturduğumuz Index'i Componente ayırmaya karar verdik ama bu Componenti Memberin dışında oluşturduk.
    
ViewComponent içine new folder MemberDashboar içine new class _ProfileInformation ve Component içine new folder _ProfileInformation içine new view Default açtık. Bu default sayfasına istediğimiz yeri kestik ve yerne @await kodunu yazdık devamında Viewbagler ile istediğimiz bilgiyi çektik.

# 45 Ders
Bu derste profilin içinde yeni bir component açacağız. _GuideList classını açıyoruz MemberDashboard içine.
GuideManager olmadığı için öncelikle BusinessLayer içindeki Concrete klasörü içine bu classı oluşturuyoruz. Sadece GetList kısmını doldurduk. Daha sonra Component içine _GuideList klasörü devamında Default view ini oluşturduk.
Bunları yaptıktan sonra Guide tablosuna 5 rehber ekledik. Bu 5 rehberin listelenmesi için GuideList te Getlist komutunu kullandık.
Devamında İstediğimiz yeri kesip foreach'e sokmak için sadeleştirdik döngüye soktuk. Bilgiler geldikten sonra dersi bitirdik.

# 46 Ders
Bu derste componentleme işlemine _PlatformSetting kısmı ile başladık. Gerekli işlemleri yaptıktan sınra türkçeleştirip navbar kısmındaki linkleri de düzelttik.

# 47 Ders
Admin layoutu indirdik. Yani admin kısmına geçiş yaptık. Dashboard kısmına geri döneceğiz.
Öncelikle Views klasörü içinde yeni bir view açıyoruz _AdminLayout. devamında areaya yeni bir area ekliyoruz adı Admin. Sonra içine bir controller ekledik. DestinationController ([Area("Admin")] yazdık.) ve ardından Index e Razor view ekledik. Layout'u AdminLayout seçtik. Layoutta hata almamak için Renderbody kodunu yazdık. Areayı ekledikten sonra gelen Scaffolding içindeki koduda startup'ta en sona yapıştırdık.
Yaptığımız işlemlerden sonra Index sayfası geldi.
Layout'u düzenledik.

# 48 Ders
Bu derste öncelikle açtığımız DestinationController'da Getlist metodu ile listelemek için kodumuzu yazdık. Daha sonra indexinde tablo yapısı oluşturduk. Daha sonra CRUD işlemleri için controllerı doldurduk ADD ve UPDATE için yeni viewler oluşturup add için bir form yapısı oluşturduk eklerken hata verdi çünkü TAdd metodunun içi dolu değildi. Doldurunca düzeldi.

# 49 Ders
Bu derste Indexte oluşturduğumuz forma linkler verdik. Deavmında UpdateDestination sayfasını oluşturduk. DestinationManagerdaki içleri boş olan ama bize gerekli olan kısmını doldurduk. RedirecToAction kısmını düzelttik. Herşey olması gerektiği gibi oldu.

Daha sonra AdminLayout'u partiallara ayırmaya karar verdik. Bunin için AdminController oluşturup;
-> PartialHeader
-> PartialAppBrandDemo controllerların oluşturup partial view ekledik. İlgili alanı kesip @await kodu ile Partial'ı çağırdık. Navbar kısmını 50. Derse bıraktık.

# 50 Ders
Bu derste partial'lamaya devam ediyoruz.
-> PartialSideBar
-> PartialNavbar
-> PartialFooter
-> PartialScript

Bu partialları oluşturduktan sonra side bar partial'ı bize uygun hale getirdik.

CRUD işlemlerinin formlarını ve listeleme kısmındaki tabloyu templateden çekerek düzenledim.

# 51 Ders
Bu derste admin side bara yeni ikon ve menü ekledik.

# 52 Ders
Admin areada yeni bir controller oluşturuyoruz DashbordController ve View ekliyoruz. Daha sonra admin templatedaki index sayfasını alıp kendi indeximize yapıştırıp düzenledik.
Daha sonra bu dashboard sayfasını componentlere ayırmaya karar verdik. Bunun için ViewComponents içine new folder AdminDashboard ekledik daha sonra içine new class ekledik _DashboardBanner. Devamında shared içindeki Componetns içine new folder _DashboardBanner ve içine Razor Partial View ekledik (Default).
Daha sonra aynı işlemi
-> _Card1Statistic içinde yaptık.
Devamında bu componenti viewbagler ile dinamik hale getirdik.

# 53 Ders
-> _TotalRevenue
-> _Card2Statistic
-> _DestinationStatistic
-> _Destination2Statistic
-> _AdminGuideList.cs

Hoca _AdminHeaderPartialda yaptı ama ben içindeki eksik linkleri direk layout partial a koyduğum için yapmadım.

# 54 Ders
Bu derste Admin içine new controller açıyoruz ismi CommentController. TGetList in içini dolduruyoruz ve Index ekliyoruz. Açtığımız indekte yorumları görebilmek için bir tablo oluşturduk.

Elimizdeki tarih verisinin formatını değiştirebilmek için @(((DateTime)item.CommentDate).ToString("dd-MMM-yyyy")) kodunu yazdık.
Bu yorumların bağlı olduğu rota ismini yazdırabilmek için 

 ICommentDal'da ;
 public List<Comment> GetListCommentWithDestination();

 EfCommentDal'da ;
  public List<Comment> GetListCommentWithDestination()
        {
            using (var c = new Context())
            {
                return c.Comments.Include(x => x.Destination).ToList();
            }
        }
değişikliklerini yaptık.

ICommentService'de
List<Comment> TGetListWithDestination();

CommentManager'da
public List<Comment> TGetListWithDestination()
        {
            return _commentDal.GetListCommentWithDestination();
        }

değişikliklerini yapım Admindeki CommentController'da TGetList'i GetListCommentWithDestination olarak güncelledik.

Ardıncan CommentController'da
private readonly ICommentService _commentService;

        public CommentController(ICommentService commentService)
        {
            _commentService = commentService;
        }
bu güncellemeyi yaptık ki her defasında new lemeye gerek kalmasın. Bunu yaptıktan sonra bir hata aldık ve bu hatayı düzeltmek için ;
startup'ta 
35 ve 36. satıra
 services.AddScoped<ICommentService, CommentManager>();
 services.AddScoped<ICommentDal, EfCommentDal>();
 kodlarını yazarak bu hatayı çözmüş olduk.

 Devamında yorum silme için controllerda DeleteComment'ı yazdık ve silme işlemini de yaptırdıktan sonra dersi bitirdik. (Manager'da boş alanları doldurduk.)

# 55 Ders
DestinationController'da

DestinationManager destinationManager = new DestinationManager(new EfDestinationDal()); 
yerine 
 private readonly IDestinationService _destinationService;

        public DestinationController(IDestinationService destinationService)
        {
            _destinationService = destinationService;
        }
yazıyoruz. (_destinationService olarak düzeltiyoruz hatalı yerleri.)
startuptada 
services.AddScoped<IDestinationService, DestinationManager>();
services.AddScoped<IDestinationDal, EfDestinationDal>(); 
değişikliğini yapıyoruz.

Daha sonra  Sidebardaki Misafirler kısmı için yeni bir controller açıyoruz. UserController bu controllerda kullanıcağımız tablo AppUser olduğu için önce DataAccessLayer içindeki Abstract klasörüne IAppUserDall interface'sini, EntityFramework'in EfAppUserDall classını sonrada BusinessLayer içindeki Abstract klasörü içine IAppUserService interfacesini, Concrete içine de AppUserManager classını ekleyip sadece TGetList kısmını dolduruyoruz.

Daha sonra newlememek için start upda kodları yazıyoruz.

Bu işlemlerden sonra açmış olduğumuz UserController'dan index oluşturduyoruz ve içine tablo yapısını kuruyoruz. Tabloyu oluşturduktan sonra controller ı doldurduk ve dersi bitirdik.

# 56 Ders
Bu derste newleme işlemi için startupta yazdığımız

services.AddScoped<IDestinationService, DestinationManager>();
services.AddScoped<IDestinationDal, EfDestinationDal>(); 

gibi kodları düzenlemek adına BusinessLayer'a Container isimlimli new folder açıyoruz.
Devamında içine Extensions isimli bir class ekliyoruz. Bu classın içine startupta yazdığımız kodları kesip

 public static class Extensions
    {
        public static void ContainerDependencies(this IServiceCollection services)
        {
            services.AddScoped<ICommentService, CommentManager>();
            services.AddScoped<ICommentDal, EfCommentDal>();
            services.AddScoped<IDestinationService, DestinationManager>();
            services.AddScoped<IDestinationDal, EfDestinationDal>();
            services.AddScoped<IAppUserService, AppUserManager>();
            services.AddScoped<IAppUserDal, EfAppUserDal>();
        }
    }

olarak yapıştırıyoruz.
Bu class'ı startup'ta çağırmak için de kodları kestiğimiz yere

services.ContainerDependencies();

kodunu yazıyoruz.

Devamında UserController'da 

private readonly IReservationService _reservationService;

        public UserController(IAppUserService appUserService, IReservationService reservationService)
        {
            _appUserService = appUserService;
            _reservationService = reservationService;
        }
ile IReservationdan bir nesne türetiyoruz ve

public IActionResult ReservationUser(int id)
        {
            var values = _reservationService.GetListWithReservationByAccepted(id);
            return View(values);
        }

yazıp yeni bir view oluşturuyoruz bu view'i tablo ile dolduruğ grekli bilgileri çekiyoruz. Bu bilgileri çekerken kullanıcı adı ve soyadını kullanamadık onu yapacağız.

Member areasında tablo ve form güncellemesi yaptım.

# 57 Ders
404 sayfasını kodlamak için önce startup'ta 65. satıra  app.UseStatusCodePagesWithReExecute("/ErrorPage/Error404", "?code{0}"); kodunu yazdık.
Daha sonra ErrorPage için bir controller ekliyoruz. Devamında add view diyip indirdiğimiz template'i içine kopyalayıp linkleri verdik.

Devamında admin içindeki controller'a GuideController açıyoruz. Bu controller'a view ekleyip tablo ile listelettiriyoruz. Bu tabloda oluşturulan rehberi aktif ve pasif yapma içine ve CRUD işlemleri içinde controller yazıp AddGuide için bir view açıp içine form yapısını kurdum. Devamında Edit ve Delete kısmınıda tamamladım.True-False'ı yapamadım.

# 58 Ders
Bu derste ilk olarak serilog işlemi ile ilgilendik.
İlk olarak startup'ta configure services içine 
services.AddLogging(x =>
            {
                x.ClearProviders();
                x.SetMinimumLevel(LogLevel.Debug);
                x.AddDebug();
            });
kodlarını yazdık. Daha sonra home controllerda

 _logger.LogInformation("Index sayfası çağrıldı.");
 _logger.LogError("Error log çağrıldı.");

kodlarını yazdık ki bu kodları yazdığımız sayfa çalıştığında outputta görebilelim.

Devamında paket indirdik (UI Katmanına) 

-> Serilog.Extensions.Logging.File (3.0.0)
devamında startupta

public void Configure(IApplicationBuilder app, IWebHostEnvironment env, ILoggerFactory loggerFactory)
        {
            var path = Directory.GetCurrentDirectory();
            loggerFactory.AddFile($"{path}\\Logs\\Log1.txt");

değişikliği yaptık. Bu değişiklik sayesinde UI katmanında Logs klasörü açıldı ve outputtaki bilgiler ordaki txt dosyasına kayıt olmaya başladı.

Bu dersin devamında hocam style yazdı Admin/ Index'te resimlerin yuvarlak olması için ama bizim ki zaten yuvarlak o yüzden yazmadım.
Sonrasında AddGuide dosyasını yaptı. AddGuideyi yaparken ders yarıda kaldı.

# 59 Ders
Bu derste amacımız excel dosyası yapmak öncelikle ExcelController adında bir controller açıyoruz. Devamında UI katmanına paket indiriyoruz.
-> EPPlus (6.0.7)
Sonrasında conroller'ı

public IActionResult Index()
        {
            ExcelPackage excel = new ExcelPackage();
            var workSheet = excel.Workbook.Worksheets.Add("Sayfa1");

            workSheet.Cells[1, 1].Value = "Rota";
            workSheet.Cells[1, 2].Value = "Rehber";
            workSheet.Cells[1, 3].Value = "Kontenjan";

            workSheet.Cells[2, 1].Value = "Gürcistan - Batun Turu";
            workSheet.Cells[2, 2].Value = "Efrun Evdi";
            workSheet.Cells[2, 3].Value = "50";

            workSheet.Cells[3, 1].Value = "Sırbistan - Makedonya Turu";
            workSheet.Cells[3, 2].Value = "Selin Çetkin";
            workSheet.Cells[3, 3].Value = "35";

            var bytes = excel.GetAsByteArray();

            return File(bytes, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "dosya1.xlsx");
        }

şeklinde dolduruyoruz. Add View diyip bu safyayı çalıştırdığımızda excel dosyasının indiğini görüyoruz.

Şimdi bu durumu dinamik hale getirmke için DestinationModel açıyoruz devamında excel controller'ı
public class ExcelController : Controller
    {
        public IActionResult Index()
        {
            return View();
        }

        public List<DestinationModel> DestinationList()
        {
            List<DestinationModel> destinationModels = new List<DestinationModel>();
            using (var c = new Context())
            {
                destinationModels = c.Destinations.Select(x => new DestinationModel
                {
                    City = x.City,
                    DayNight = x.DayNight,
                    Price = x.Price,
                    Capacity = x.Capacity,
                }).ToList();
            }
            return destinationModels;
        }

        public IActionResult StaticExcelReport()
        {
            ExcelPackage excel = new ExcelPackage();
            var workSheet = excel.Workbook.Worksheets.Add("Sayfa1");

            workSheet.Cells[1, 1].Value = "Rota";
            workSheet.Cells[1, 2].Value = "Rehber";
            workSheet.Cells[1, 3].Value = "Kontenjan";

            workSheet.Cells[2, 1].Value = "Gürcistan - Batun Turu";
            workSheet.Cells[2, 2].Value = "Efrun Evdi";
            workSheet.Cells[2, 3].Value = "50";

            workSheet.Cells[3, 1].Value = "Sırbistan - Makedonya Turu";
            workSheet.Cells[3, 2].Value = "Selin Çetkin";
            workSheet.Cells[3, 3].Value = "35";

            var bytes = excel.GetAsByteArray();

            return File(bytes, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "dosya1.xlsx");
        }

        public IActionResult DestinationExcelReport()
        {
            using (var workbook = new XLWorkbook())
            {
                var workSheet = workbook.Worksheets.Add("Tur Listesi");
                workSheet.Cell(1, 1).Value = "Şehir";
                workSheet.Cell(1, 2).Value = "Konaklama Süresi";
                workSheet.Cell(1, 3).Value = "Fiyat";
                workSheet.Cell(1, 4).Value = "Kapasite";

                int rowCount = 2;
                foreach (var item in DestinationList())
                {
                    workSheet.Cell(rowCount, 1).Value = item.City;
                    workSheet.Cell(rowCount, 2).Value = item.DayNight;
                    workSheet.Cell(rowCount, 3).Value = item.Price;
                    workSheet.Cell(rowCount, 4).Value = item.Capacity;
                    rowCount++;
                }

                using (var stream = new MemoryStream())
                {
                    workbook.SaveAs(stream);
                    var content = stream.ToArray();
                    return File(content, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "YeniListe.xlsx");
                }
            };
        }
    }

Ayrıca burda -> ClosedXML (0.100.3) paketini indiriyoruz.
bu hale getirip açılan index sayfasına 2 buton koyup hem statik hemde dinamik haldeki excel dosyalarının indiğini görüyoruz.

Bu dersin 2. kısmında AddGuide'ye devam ediyoruz. Bu index sayfası için ValidationRule içine new class GuideValidator açıp istediğimiz gibi doldurum bu kuralları controller tarafında çağırım indextede span etiketi ile yazdırdık.

# 60 Ders
Bu derste öncelikle PdfReportController açıyoruz. Devamında UI katmanına paket indiriyoruz.
-> iTextSharp.LGPLv2.Core (1.9.2).
Sonrasında  açtığımız controller'da

 public IActionResult StaticPdfReport()
        {
            string path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/pdfreports/" + "dosya1.pdf");
            var stream = new FileStream(path, FileMode.Create);

            Document document = new Document(PageSize.A4);
            PdfWriter.GetInstance(document, stream);

            document.Open();
            Paragraph paragraph = new Paragraph("Traversal Rezervasyon Pdf Raporu");
            document.Add(paragraph);
            document.Close();
            return File("/pdfreports/dosya1.pdf", "application/pdf", "dosya1.pdf");
        }

işlemini yapıp index ekleyip button eklediğimizde pdf indirildiğini görüyoruz.

Devamında
 public IActionResult StaticCustomerReport()
        {
            string path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/pdfreports/" + "dosya2.pdf");
            var stream = new FileStream(path, FileMode.Create);

            Document document = new Document(PageSize.A4);
            PdfWriter.GetInstance(document, stream);

            document.Open();
            PdfPTable pdfPTable = new PdfPTable(3);

            pdfPTable.AddCell("Misafir İsmi");
            pdfPTable.AddCell("Misafir Soyismi");
            pdfPTable.AddCell("Misafir Tc");

            pdfPTable.AddCell("Efrun");
            pdfPTable.AddCell("Evdi");
            pdfPTable.AddCell("1234567890");

            pdfPTable.AddCell("Ali");
            pdfPTable.AddCell("Evdi");
            pdfPTable.AddCell("1234567891");

            pdfPTable.AddCell("Totem");
            pdfPTable.AddCell("Evdi");
            pdfPTable.AddCell("1234567892");

            document.Add(pdfPTable);
            document.Close();

            return File("/pdfreports/dosya2.pdf", "application/pdf", "dosya2.pdf");
        }

yazarak 2.dosyayı oluşturuyoruz. Bunları daha dinamik hale getirmem lazım.