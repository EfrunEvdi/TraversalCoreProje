# 2 Ders
N Katmanlı Mimari (N Tİer Arc.)
--------------------------------
Entity Layer: 
* Bu katmanda Entityler tanımlanacak. 
* SQL de Table olarak tutulan datalar C# ta Class olarak, SQL de Column olarak tutalan datalar da C# ta prooerty olarak tutulacak.
--> Code First: Tamamen kod öncelikli ilerlemek.
--------------------------------
Data Access Layer:
* Bu katmanda veri tabanı crud işlemleri için CRUD işlemleri alt yapısı oluşturulacak. Repository Desing Pattern kullanacağız.
* CREAT-READ-UPDATE-DELETE
--------------------------------
Business Layer:
* Validasyonların kontrolü 
--> Lokasyon max 50 karakter olmalı
--> Fiyat mutlaka sayısal veri olmalı vb.
--------------------------------
Presentation Layer:
* Sunum katmanı Controller tarafındaki backend kodları ve projenin Uİ kısmı bu katmanda yer alır.

# 3 Ders
- Solition üstüne sağ tık add new project diyoruz ve 3 katmanı ekliyoruz.
* Concrete: Somut ifadelerin tutulduğu klasör.
* Abstarct: Soyut ifadelerin tutulduğu klasör.

- EntityLayer: 
Class -> Table
Property -> Column
*Lokasyon, Hakkımızda, Müşteriler, Admin gibi

EntityLayer içine new folder Concrete ekliyoruz.
Conctere içine new class Destination + About

# 4 Ders
EntityLayer içine Conctere içine new class Feature + Feature2 + SubAbout + Testimonial + Newsletter

# 5 Ders
EntityLayer içine Conctere içine new class About2 + Guide + Contact

# 6 Ders
Bütün katmanlara aşağıdaki paketleri yüklüyoruz.
Microsoft.EntityFrameworkCore (5.0.12)
Microsoft.EntityFrameworkCore.Desing (5.0.12)
Microsoft.EntityFrameworkCore.SqlServer (5.0.12)
Microsoft.EntityFrameworkCore.Tools (5.0.12)

# 7 Ders
DataAccessLayer içine new folder
* Abstract

* Concrete
  + Context

* EntityFramework

* Repository

EntityLayer - DataAccessLayer - BusinessLayer - PresentationLayer

Bu sıralama önemli 
Entity -> Hepsine 
DataAccess -> Busines + Presentation
Business -> Presentation
referans olarak verilir.( Bu işlem add Project Reference olarak yapılır.)

Context doldurulduktan sonra EntityLayerdaki classlara [Key] attribute u koyuldu.

# 8 Ders
İlk migration umuzu yapıyoruz.

# 9 Ders
DataAccessLayer içine Abstract içine new interface IGuideDal + IDestinationDal
DRY yapmıyoruz. Bu yüzden generic yapı kullanacağız.
IGenericDal interfacesini açıp diğer interfacelere kalıtım yoluyla miras veriyoruz.

# 10 Ders
DataAccessLayer içine Abstract içine new interface IAboutDal + IAbout2Dal + IContactDal + IFeatureDal + IFeature2Dal + INewsletterDal + SubAboutDal + ITestimonialDal ve miras verme işlemini yapıyoruz.
Daha sonra DataAccessLayer içindeki Repository içine new class GenericRepository deyip imğlement interface diiyor ve içlerini dolduruyoruz.

# 11 Ders
DataAccessLayer içine içine EntityFramework içine new class EfAboutDal + EfAbout2Dal + EfContactDal + EfDestinationDal + EfFeatureDal + EfFeature2Dal + EfGuideDal + EfNewsletterDal + EfSubAboutDal + EfTestimonialDal

# 12 Ders
BusinessLayer içine new folder Abstract + Concrete + ValidationRule
Abstract içine new interface IGenericService + IAboutService + IAbout2Service + IContactService + IDestinationService + IFeatureService + IFeature2Service + IGuideService + INewsletterService + ISubAboutService + ITestimonialService
Concrete içine new class  AboutManager ( implement interface ediyoruz.) İçini dolduruyoruz diğerlerini zamanı gelince oluşturacağız.

# 13 Ders
BusinessLayer ve Presentation içine aşağıdaki paketleri yüklüyoruz.
FluentValidation (10.3.6)
FluentValidation.AspNetCore (10.3.6)

BusinessLayer içine ValidationRules içine new class AboutValidator

UI katmanına new controller DefaultController + shared içide _UILayout ekliyoruz. DefaultController dan Index açıyoruz.

# 14 Ders
UILayout'ta template'daki indexi kopyalayıp layout kısmını aldık geri kalanı Default index in içine attık. Uzantıları düzelttik @RenderBody() kodunu indexin gelmesini istediğimiz yere koyduk.
Layout u tamamladıktan sonra Partiallamak için Views içine new folder LayoutPartial içine new view razor view partial seçilecek _HeaderPartial.
@await Html.PartialAsync("/Views/LayoutPartial/HeaderPartial.cshtml") kodu ile partial kısmı çalışacak.
Bu işlemi _NavbarPartial.cshtml ve _FooterPartial.cshtml içinde yapıyoruz.

# 15 Ders
Partiallayama _ScriptPartial.cshtml için ed yapıyoruz.
Daha sonrasında Partialları türkçeleştirdik.
Default/Index'teki alanları ViewComponent yapmaya karar verdik.
UI katmanı içine new folder ViewComponents açıyoruz.
Bu klasör içine new folder Default içine new class _SliderPartial.cs açıyoruz.

---------------------------------------------------------
- Partial View’de bir veri bize döndürücekse bunu mutlaka Contollerden alması gerekmektedir.
- Her bir View’in Partiala Controller üzerinden veri göndermek hem Controller maliyetini attırııcaktır hem de Controllera amacını saptıracaktır.
- PartialView yapılanması ihtiyacı olan dataları Controller üzerinden elde edeceği için Controller’daki maliyeti artırmakta ve SOLID prensiplerine aykırı davranılmasına sebebiyet verebilmektedir.
- PartiView yapısal olarak controller üzerinden beslenmektedir.
- *ViewCompenent* ihtiyacı olan dataları controller üzerinden değil direkt kendi cs.dosyasında elde edebilmektedir.Böylece controllerdaki luzumsuz maliyeti ortadan kaldırmış olmaktayız.
---------------------------------------------------------

Daha sonra Shared içine new folder _SliderPartial bu klasörün içine de Default.cshtml ekliyoruz. Default a istediğimiz yeri yapıştırdıktan sonra @await Component.InvokeAsync("_SliderPartial") ile bu Componenti çağırıyoruz. Sonrasında sayfayı türkçeleştiriyoruz.

# 16 Ders
Bir önceki Component işlemini _PopularDestinationsPartial içinde yapıyoruz.
BusinessLayer içine DestinationManager classını açıyoruz. Sadece GetList kısmını doldurup _PopularDestinationsPartial da 
 DestinationManager destinationManager = new DestinationManager(new EfDestinationDal()); ile yeni bir nesne türetiyoruz.public kısmının içine de var values = destinationManager.TGetList(); ile listeleme işlemini gerçekleştiriyoruz (return View(values);).
 Sonrada PopularDestination un Default unu foreach'a soktuk.

# 17 Ders
Bu derste diğer bir Component olan _StatisticsPartial ı yapıyoruz. Bu sayfayı türkçeleştirip ViewBag lerle istatistikleri getiriyoruz.
Feature Componenti açıyoruz ama bu componentte listeleme yapacağımız için BusinessLayer içindeki concrete içine new class ekliyoruz FeatureManager GetList kısmını doldurduktan sonra Component işlemlerini tamamlıyoruz.

# 18 Ders
Bu Feature kısmının verilerini getirmek için if kullandım.
Daha sonrasında SubAbout için aynı Component işlemlerini tekrarladık.
Testimonial kısmınıda bu şekilde oluşturuyoruz.

# 19 Ders
Testimonial i türkçeleştirip foreach e soktuk. Daha sonrasında footer ıda türkçeleştirdik.

# 20 Ders
Template in tam halini indirdik.
DestinationController açtık. Index ekledik(Razor view + Loyout).
services.html sayfasından yararlanarak Destination/Index i doldurup, türkçeleştirip, foreach a sokuyoruz.

# 21 Ders
DestinationDetails için DestinationControllerda  HttpGet ve HttpPost controller satırları oluşturduk. Template de ilgi sayfayı bu details sayfasına ekledik. Düzgün çalışmadığı için layout katmanında köklü bir değişiklik yaptık.

# 22 Ders
* Anasayfa slider fotorafları gelmiyor.
Bu derste DestinationDetails sayfası için 2 tablo olmaması adına Destination Entitysine eklemeler yaptık. Daha sonra GetByID kısmı yoktu bizde DataAccessLayerda onu yazdık ve DestinationManager da içini doldurduk. Controller tarafındada HttpGette bu id yi getirme kodunu kullandık. Devamında @Model.Details1 istediğimiz satırı çağırdık. DestinationDetailste sadeleştirmeler yaptık.

# 23 Ders
Bu derste DestinationDetails kısmındaki yorum kısmı için yeni bir tablo oluşturduk ve bu tabloyu Destination tablosuna bağladık.Migration yaptık.
_CommentListPartial için bir component yapıyoruz.
_AddCommentPartial İçin de component işlemini yapıyoruz.

# 24 Ders
Yorumları listeleyebilmek için IGenericDal'a List<T> GetListByFilter(Expression<Func<T,bool>> filter); yazdık. Bu işlemi yaptıktan sonra GenericReposityor'de

 public List<T> GetListByFilter(Expression<Func<T, bool>> filter)
        {
            using var c = new Context();
            return c.Set<T>().Where(filter).ToList();
        }

ile implemen interface ediyoruz.
ICommentDal ve EfCommentDal'ı ekledik. Ardından ICommentService ve CommentManager ı ekliyoruz. Daha sonra CommentManager da

 public List<Comment> TGetDestinationByID(int id)
        {
            return _commentDal.GetListByFilter(x => x.DestinationID == id);
        }

ve ICommentService'e

        List<Comment> TGetDestinationByID(int id);

kodu ile id ye göre getirme işlemini yapıyoruz.

id ile işlem yapacağımız için @await Component.InvokeAsync("_CommentListPartial",new { id = ViewBag.DestinationID }) ile id yi alıyoruz.

# 25 Ders
Yorum yap alanını türkçeleştirdik.
Bu alanı componentte yapmaya çalıştık fakat olmadı bu yüzden CommentController açtık partialview olarak yapacağız.
Controllerda HttpGet ve Post işlemlerini tamamladıktan sonra açtığımız AddComment view inde sayfa düzgün bir şekilde geldi fakat yorum yaptırmadı bu işlemi Ajaxla yapmaya karar verdik. 26 derste...

# 26 Ders
Bu ders çok önemli Ajax işleminden vazgeçtik. CommentController tarafında aynı methodu hem bir partial view hemde Iactionresult olarak tanımladık.

[HttpGet]
public PartialViewResult AddComment()
  {
       return PartialView();
  }
[HttpPost]
public IActionResult AddComment(Comment comment)
  {
       comment.CommentDate = Convert.ToDateTime(DateTime.Now.ToShortDateString());
       comment.CommentStatus = true;
       comment.DestinationID = 3;
       commentManager.TAdd(comment);
       return RedirectToAction("Index", "Destination");
  }
bu kalıp çok önemli.

Bu dersin devamında comment.DestinationID = 3; ile hangi sayfaya yorum yaparsak yapalım id=3 olanrotaya yorum yapar bunu dzeltmek adına şu işlemleri yapıyoruz.

Öncelikle DestinationDetails'de ;

@await Html.PartialAsync("~/Views/Comment/AddComment.cshtml",new { id = ViewBag.DestinationID }) olarak güncelledim.

CommentController'ın HttpPost kısmını ;

[HttpPost]
        public IActionResult AddComment(Comment comment)
        {
            comment.CommentDate = Convert.ToDateTime(DateTime.Now.ToShortDateString());
            comment.CommentStatus = true;

            commentManager.TAdd(comment);
            return RedirectToAction("DestinationDetails", "Destination", new { id = comment.DestinationID });
        } 
olarak yazdım son kod bizi ilgili detay sayfasına atayacak.

AddComment kısmında da ;

<div class="form-group col-lg-6">
            <input type="hidden" name="DestinationID" class="form-control" value="@ViewBag.DestinationID" required="" />
</div> 
olarak id yi kayıt ettirdim.

# 27 Ders
Bu derste identity paketlerini yüklüyoruz.
BusinessLayer hariç tüm katmanlara yüklediğimiz paketler;
- Microsoft.AspNetCore.Identity (2.2.0)
- Microsoft.AspNetCore.Identity.EntityFrameworkCore (5.0.12)

Daha sonra EntityLayer a AppUser ve AppRole classı açıyoruz. Bu işlemleri yaptıktan sonra public class Context : IdentityDbContext<AppUser, AppRole, int> olarak Context'i güncelliyoruz. Daha sonra migration yapıyoruz.

# 28 Ders
Giriş ve kullanıcı templatelerini yükledikten sonra LoginController açıyoruz.
Daha sonra SingUp ve SingIn controllerlarını tanımladıktan sonra SingUp için bire view ekliyoruz. ( Partial değil Layoutsuz.) SingIn içinde aynı işlemi yapıyoruz.
İndirdiğimiz templatelari bu view dosyalarına koyup türkçeleştiriyoruz.

# 29 Ders
startup.cs te 28. satıra services.AddDbContext<Context>(); yazdık.
29. satıra services.AddIdentity<AppUser,AppRole>().AddEntityFrameworkStores<Context>(); yazdık.
34-38 arası services.AddMvc(config =>
            {
                var policy = new AuthorizationPolicyBuilder().RequireAuthenticatedUser().Build();
                config.Filters.Add(new AuthorizeFilter(policy));
            }); yazdık.
40. satıra services.AddMvc(); yazdık.
58. satıra  app.UseAuthentication(); yazdık.

Bu bölümde slider kısmı düzeltildi.

Sonrasında LoginController'a
private readonly UserManager<AppUser> _userManager;

        public LoginController(UserManager<AppUser> userManager)
        {
            _userManager = userManager;
        }
        yazdık.
HttpPost kısmını şu şekilde güncelledik.
[HttpPost]
        public async Task<IActionResult> SingUp(UserRegisterViewModel p)
        {
            return View();
        }
Daha sonrasında UserRegisterViewModel modelini oluşturduk.

Devamında modelden gelen değerlerle elimizdeki AppUser tablosunu eşleştirdik. Bunları yaptıktan sonra  kaydetme işlemi gerçekleşti.

# 30 Ders
SingUp templat i işimize yaramıyacağı için yeni bir template indirdik ve bunu tekrardan modelimize uydurduk, türkçeleştirdik.

# 31 Ders
<div class="text-danger" asp-validation-summary="ModelOnly">
                            
</div> 
kodu ile şifredeki kuralları görebiliyoruz. Ama ingilizce olarak geliyor. Bu yapıyı türkçeleştirmemiz lazım. Türkçeleştirmek için Bir model ekliyoruzz bu model önemli CustomIdentityValidator.
daha sonrasında bu modelin çalışabilmesi için startup'ın 32. satırını
services.AddIdentity<AppUser, AppRole>().AddEntityFrameworkStores<Context>().AddErrorDescriber<CustomIdentityValidator>().AddEntityFrameworkStores<Context>();

# 32 Ders
Dashbord template si indirdik. Kullanıcı için bir layout oluşturup adını _UserLayout koyduk. Areas adında yeni bir klasör oluşturduk. Sağ tık add area diyip mvc area seçip adını Member koyduk. Bu işlemle birlikte gelen Scaffolding sayfasındaki

app.UseEndpoints(endpoints =>
        {
          endpoints.MapControllerRoute(
            name : "areas",
            pattern : "{area:exists}/{controller=Home}/{action=Index}/{id?}"
          );
        });

kodunu startupda 82. satıra yapıştırdık.
Daha sonra açtığımız bu Areanın içindeki Controller klasörüne 3 tane controller ekledik.
-> CommentController
-> MessageController
-> ProfileController
   
*** Areadaki controller in çalışması için [Area("Member")] yazmalıyız. ***
[AllowAnonymous] de yazıyoruz ki giriş istemesin.
_UserLayoutu düzenledik ve partiallara ayırmaya başladık.
Bu Partialları oluşturmak için MemberLayouPartial adlı klasörün içine açıyoruz.
-> _HeaderPartial
-> _NavbarPartial

# 33 Ders
-> _Navbar2Partial
-> _RightbarPartial
-> _FooterPartial
-> _ScriptPartial partial larınıda oluşturduk.

Daha sonrasında DestinationController ekliyoruz Member daki controller'a. Açtığımız bu controller için index açtık layoutu _UserLayout.
Bu indexi aktif tur rotalarımız olarak kullandık. Dashboard tan gelen tabloyu kullandım ben.

# 34 Ders
        private readonly SignInManager<AppUser> _singInManager;
Login işlemi için LoginController'a 
private readonly SignInManager<AppUser> _singInManager; 
kodunu ekledik.
Altındaki Constructor metodunu da 

public LoginController(UserManager<AppUser> userManager, SignInManager<AppUser> singInManager)
        {
            _userManager = userManager;
            _singInManager = singInManager;
        }

şeklinde güncelliyoruz.
Sonrasında UserSingInViewModel i oluşturuyoruz.
Devamında LoginController'da SinIn kısmının post kısmını yazıyoruz.

Daha sonra SingIn de @model TraversalCoreProje.Models.UserSingInViewModel kodu ile form içini düzenliyoruz.
Sisteme otantike olmuş olduk.

# 35 Ders
Bu bölümde prfil düzenleme kısmını yapacağız öncelikle area içindeki ProfileController dan index açıyorum, devamında area içinde ki model klasörüne UserEditViewModel ini ekliyoruz. Açtığımız index sayfasında bir form kodu yazıyoruz bu kodları @model TraversalCoreProje.Areas.Member.Models.UserEditViewModel ile eşleştiriyoruz.
Bu işlemlerden sonra ProfileController ın son hali 

[Area("Member")]
[Route("Member/[controller]/[action]")]
    public class ProfileController : Controller
    {
        private readonly UserManager<AppUser> _userManager;

        public ProfileController(UserManager<AppUser> userManager)
        {
            _userManager = userManager;
        }
        [HttpGet]
        public async Task<IActionResult> Index()
        {
            var values = await _userManager.FindByNameAsync(User.Identity.Name);
            UserEditViewModel userEditViewModel = new UserEditViewModel();
            userEditViewModel.Name = values.Name;
            userEditViewModel.Surname = values.Surname;
            userEditViewModel.PhoneNumber = values.PhoneNumber;
            userEditViewModel.Mail = values.Email;
            return View(userEditViewModel);
        }

oluyor.

Çok Önemli
------------------------------------
[Route("Member/[controller]/[action]")] kodu ile login controllerdaki yönlendirme kodu olan return RedirectToAction("Index", "Profile", new { area = "Member" }); çalışır.

Bu yönlendirme sağlandıktan sonra Dashboard template'inden beğendiğim kısımla birlikte hocanın yaptığı form kısmını birleştirip güzel bir profil düzenleme kısmı yaptım.

# 36 Ders
Bu derste amacımız kullanıcan profil resmi almak. Bu işlem için sırayla şunları yapıyoruz ;

UserEditViewModel e 

public IFormFile Image { get; set; } 

kodunu ekiyoruz. Dosya alacağız çünkü kullanıcıdan.

Devamında Profile controller da 

[HttpPost]
        public async Task<IActionResult> Index(UserEditViewModel p)
        {
            var user = await _userManager.FindByNameAsync(User.Identity.Name);
            if (p.Image != null)
            {
                var resource = Directory.GetCurrentDirectory();
                var extension = Path.GetExtension(p.Image.FileName);
                var imagename = Guid.NewGuid() + extension;
                var savelocation = resource + "/wwwroot/userimages/" + imagename;
                var stream = new FileStream(savelocation, FileMode.Create);
                await p.Image.CopyToAsync(stream);
                user.ImageUrl = "/userimages/" + imagename;
            }
            user.Name = p.Name;
            user.Surname = p.Surname;
            user.PasswordHash = _userManager.PasswordHasher.HashPassword(user, p.Password);
            var result = await _userManager.UpdateAsync(user);
            if (result.Succeeded)
            {
                return RedirectToAction("SingIn", "Login");
            }
            return View();
        }

ekliyoruz.

Son olarak Profile/Indecte form kısmını <form method="post" enctype="multipart/form-data"> olarak güncelledik.

# 37 Ders
Bu derste rezervasyon kısmıyla ilgileneceğiz.
Bunun için EntityLayer da class oluşturuyoruz. Reservation classını context tede tanımlıyıp migration yapıyoruz. 
Devamında Memberde yeni bir controller açıyoruz. ReservationController. Bu controller ın içinde ;
MyCurrentReservation, MyOldReservation ve Getli Postlu NewRezervation controller larını oluşturuyoruz. Sonrasında NewRezervation için bir layoutlu View ekliyoruz.

# 38 Ders
Bu derste il olarak ReservationController'da
[HttpGet]
        public IActionResult NewRezervation()
        {
            List<SelectListItem> values = (from x in destinationManager.TGetList()
                                           select new SelectListItem
                                           {
                                               Text = x.City,
                                               Value = x.DestinationID.ToString()
                                           }).ToList();
            ViewBag.v = values;
            return View();
        }
[HttpGet] kısmını bu şekilde güncelledik. Daha sonra DataAccessLayer'da Abstract içine new interface IReservationDal, EntityFramework içine new class EfReservationDal'ı oluşturduk. BusinessLayer'da  Abstract içine new interface IReservationService, devamında Concrete içine new class ReservationManager ekliyoruz. İçinde sadece TAdd kısmını güncelledik.
Sonrasında ReservationController'a dönüp HttpPost kısmını ;
[HttpPost]
        public IActionResult NewRezervation(Reservation p)
        {
            p.AppUserID = 1;
            reservationManager.TAdd(p);
            return RedirectToAction("MyCurrentReservation");
        }
olarak güncelledik. Id yi daha sonra dinamik hale getircez.
NewReservation sayfasında form oluşturduk. Bu form ile yeni bir rezervasyon sqlde eklendi fakat gittiği sayfa olmadığı için hata verdi.

# 39 Ders
Bu derste ilk olarak ReservationController'da p.Status = "Onay bekliyor..."; olarak güncelledik.
MyCurrentReservation için bir index ekledik. MyOldReservation içinde bir index ekledik. Sonrasında sidebar a bu sayfaların linkini verdik.

# 40 Ders
ReservationController'a 
public IActionResult MyApprovalReservation()
        {
            return View();
        }
        ekliyoruz.
Bir Index ekliyoruz Onay bekleyen rezervasyonlar olarak başlık attık.
Sonrasında 

private readonly UserManager<AppUser> _userManager;

        public ReservationController(UserManager<AppUser> userManager)
        {
            _userManager = userManager;
        }
olarak controllera ekleme yaptık. 

MyApprovalReservation kısmını şu şekilde güncelledik.

public async Task<IActionResult> MyApprovalReservation()
       {
           var values = await _userManager.FindByNameAsync(User.Identity.Name);
           ViewBag.v = values.Id;
           return View();
       }

Devamında navbarda link verdik.
        
IReservationService'e List<Reservation> GetListApprovalReservation(int id); satırını ekledik.
ReservationManagerda implrmrnt ettikten sonra
public List<Reservation> GetListApprovalReservation(int id)
        {
            return _reservationDal.GetListByFilter(x => x.AppUserID == id);
        }
içini bu şekilde dolduruyoruz.
Bu işlemden sonra ReservationController da

public async Task<IActionResult> MyApprovalReservation()
        {
            var values = await _userManager.FindByNameAsync(User.Identity.Name);
            var valuesList = reservationManager.GetListApprovalReservation(values.Id);
            return View(valuesList);
        }

işlemini yapıyoruz.
Daha sonra bu controllerin indeksinde bir tablo oluşturduk.
Bu şekilde giriş yapmış kullanıcının tüm rezervasyon sitesi gelmiş oldu gelecek ders onu düzelticez.